import asyncio
import logging
import os
import threading

import pytz
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from apscheduler.schedulers.asyncio import AsyncIOScheduler

import datetime
import PayManager
import config
from FSM import PayFSM, CalculatorFSM, WithdrawMoneyFSM, ChangeCryptTypeFSN, AnswerAfterGiftFSM, \
    SendGiftFSM, PayCryptFSM, UserCodeFSM, WithdrawMoneyPercentFSM
import helper
from db import ManagerUsersDataBase, ManagerPayDataBase, ManagerWithDrawDataBase, ConfigDBManager
import coinbase_data
from User import User, UserDB
from back_work import worker
from Percent import worker_percent
from back_clones import worker_clones
from jump import worker_jumps
import inline_keybords
import logic
import clones


lock = asyncio.Lock()

PATH = config.PATH

configCl = ConfigDBManager.get()

API_TOKEN = configCl.api_bot  # –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
NAME_BOT = config.name_bot  # –°—á–∏—Ç—ã–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –±–æ—Ç–∞
NUMBER_PAY = config.NUMBER_PAY

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

db = ManagerUsersDataBase()
dbPay = ManagerPayDataBase()
dbWithDraw = ManagerWithDrawDataBase()

message_handlers_commands = ["üí≥ –ö–æ—à–µ–ª—ë–∫",  "üöÄ –í–∑–ª—ë—Ç", "üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "üìù –û –ø—Ä–æ–µ–∫—Ç–µ", "üåë Space Money", "‚öô –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞"]
list_persons = []   # –°–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥–º—Å—Ç—Ä–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
now_user: User = None   # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å, –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã


@dp.message_handler(commands=['start'])         # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def send_welcome(message: types.Message):
    if message.chat.type == "private":

        if not await db.exists_user(message.from_user.id, loop):
            referrer_id = message.get_args()
            if referrer_id != "":
                global now_user
                now_user = User(message.from_user.first_name, message.from_user.id,
                                datetime.date.today(), int(referrer_id))
                if now_user in list_persons:
                    list_persons.remove(now_user)
                if now_user not in list_persons:
                    list_persons.append(now_user)
            else:
                now_user = User(message.from_user.first_name, message.from_user.id, datetime.date.today())
                if now_user in list_persons:
                    list_persons.remove(now_user)
                if now_user not in list_persons:
                    list_persons.append(now_user)
            with open(PATH + "/Data/start_text.txt", 'r', encoding='utf8') as file:
                reply = file.read()
            with open(PATH + "/img/login.png", 'rb') as file:
                await bot.send_photo(
                    message.from_user.id,
                    photo=file,
                    caption=reply,
                    reply_markup=inline_keybords.get_start_inline(),
                    parse_mode="HTML"
                )
        else:
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=inline_keybords.profile_markup())


@dp.callback_query_handler(text="login")    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∏
async def login_after_callback(callback: types.CallbackQuery):
    for us in list_persons:
        if callback.from_user.id == us.user_id:
            now_user = us
            break
    if now_user.referrer_id == callback.from_user.id:
        list_persons.remove(now_user)
        await bot.send_message(callback.from_user.id,
                               "–ù–µ–ª—å–∑—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n"
                               f"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ https://t.me/{NAME_BOT}?start=855151774")
        return

    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id,
                            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ Space Gift –∏ –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
                            "\n<<–°—Å—ã–ª–∫–∞>>",
                            reply_markup=inline_keybords.accept_inline())


@dp.callback_query_handler(text="capcha")           # –ö–∞–ø—á–∞
async def capcha_callback(callback: types.CallbackQuery):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await inline_keybords.create_capcha(bot, callback.from_user.id)


@dp.callback_query_handler(text="right")        # –ï—Å–ª–∏ –∫–∞–ø—á–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è, —Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def sure_quest(callback: types.CallbackQuery):
    for us in list_persons:
        if callback.from_user.id == us.user_id:
            now_user = us
            break
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    if now_user.referrer_id is not None:
        await bot.send_message(callback.from_user.id, f"–í–µ—Ä–Ω–æ ‚úÖ\n\n–í—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É @{await db.get_user_name(now_user.referrer_id, loop)}\n\n"
                                                      f"–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–º–µ–Ω–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞!\n"
                                                      f"–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?", reply_markup=inline_keybords.sure_login())
    else:
        await bot.send_message(callback.from_user.id,
                               f"–í–µ—Ä–Ω–æ ‚úÖ\n\n–í—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å –Ω–∏ –∫ –∫–∞–∫–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É\n"
                               f"–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ –ª–∏–±–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!\n"
                               f"–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?", reply_markup=inline_keybords.sure_login())


@dp.callback_query_handler(text="no_ans")   # –ï—Å–ª–∏ –æ–Ω –æ—Ç–∫–∞–∂–µ—Ç—Å—è
async def no_ans(callback: types.CallbackQuery):
    for us in list_persons:
        if callback.from_user.id == us.user_id:
            list_persons.remove(us)
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")


@dp.callback_query_handler(text="yes_ans")  # –ï—Å–ª–∏ –æ–Ω —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è
async def yes_ans(callback: types.CallbackQuery):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(
        callback.from_user.id,
        "üîê –¢–µ–ø–µ—Ä—å –í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–æ–¥-—Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è "
        "–≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Å–ª—É—á–∞–π –ø–æ—Ç–µ—Ä–∏ ( –ª—É—á—à–µ –∑–∞–ø–∏—Å–∞—Ç—å ) –ü—Ä–∏–¥—É–º–∞—Ç—å –¥–∞–Ω–Ω—ã–π –∫–æ–¥:üëá"
    )
    await UserCodeFSM.code.set()


@dp.message_handler(state=UserCodeFSM.code)
async def code(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['code'] = message.text
    for us in list_persons:
        if message.from_user.id == us.user_id:
            login_user = us
            list_persons.remove(us)
            break
    utc_now = pytz.utc.localize(datetime.datetime.utcnow())
    date_time_now = utc_now.astimezone(pytz.timezone("UTC"))
    await db.add_user(loop, login_user.name, login_user.user_id, login_user.date, date_time_now,
                user_name=message.from_user.username, referrer_id=login_user.referrer_id,
                      last_withd=date_time_now, code=message.text)
    if login_user.referrer_id is not None:
        await db.update_count_ref(login_user.referrer_id, loop)
        await db.add_money(login_user.referrer_id, 5000, loop) #TODO
        await db.add_ref_money(login_user.referrer_id, 5000, loop) #TODO
        await db.insert_ref_money(5000, login_user.referrer_id, message.from_user.id, date_time_now, loop) # TODO
        await bot.send_message(
            login_user.referrer_id,
            f"–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è @{message.from_user.username}"
        )

    with open(PATH + "/img/login_done.png", 'rb') as file:
        await bot.send_photo(
            message.from_user.id,
            photo=file,
            caption="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Space Gift, "
                    "—á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ –¥–∞—Ä–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \nüöÄ –í–∑–ª—ë—Ç",
            reply_markup=inline_keybords.profile_markup(),
            parse_mode="HTML"
        )
    await state.reset_state(with_data=True)


@dp.callback_query_handler(text="except")       # –ï—Å–ª–∏ –∫–∞–ø—á–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è
async def except_capcha(callback: types.CallbackQuery):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "–û—à–∏–±–∫–∞ ‚ùå! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    await inline_keybords.create_capcha(bot, callback.from_user.id)


@dp.callback_query_handler(text="cancel")
async def cancel_capcha(callback: types.CallbackQuery):
    for us in list_persons:
        if callback.from_user.id == us.user_id:
            list_persons.remove(us)
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")


@dp.message_handler(lambda mes: mes.text == message_handlers_commands[1])# –í–∑–ª–µ—Ç
async def launch(message: types.Message):
    dep = await db.get_deposit(message.from_user.id, loop)
    status = await db.get_status(message.from_user.id, loop)
    planet = await db.get_planet(message.from_user.id, loop)

    if status[0] == 1 or int(planet[0]) > 0 or dep >= 5000:
        await logic.get_launch(bot, message.from_user.id, loop)

    else:
        text = "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–∑–ª–µ—Ç–µ—Ç—å, –í–∞–º –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –Ω–∞ 5000 RUB"

        with open(PATH + "/img/add_dep.png", "rb") as file:
            await bot.send_photo(
                chat_id=message.from_user.id,
                photo=file,
                caption=text,
                reply_markup=inline_keybords.takeoff()
            )


@dp.message_handler(lambda mes: mes.text == message_handlers_commands[2])
async def tools(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç", reply_markup=inline_keybords.get_tools())


@dp.message_handler(lambda mes: mes.text == message_handlers_commands[3])
async def about_project(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç", reply_markup=inline_keybords.get_about_project())


@dp.message_handler(lambda mes: mes.text == "üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def read_numb(message: types.Message):
    await message.answer("‚ñ™ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å:")
    await CalculatorFSM.COUNT_REFERRER.set()


@dp.message_handler(lambda mes: mes.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
async def ref(message: types.Message):
    count = await db.count_referrer(message.from_user.id, loop)
    text = f"ü§ñ –í–∞—à ID: {message.from_user.id}\n"\
                f"üë• –ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤: {count} —á–µ–ª.\n\n"\
                f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nhttps://t.me/{NAME_BOT}?start={message.from_user.id}\n"

    with open(PATH + "/img/referrer.png", 'rb') as file:
        await bot.send_photo(
            message.from_user.id,
            photo=file,
            caption=text,
            reply_markup=inline_keybords.get_tools(),
            parse_mode="HTML"
        )


@dp.callback_query_handler(text="invite_new_person")
async def invite_new_person(callback: types.CallbackQuery):
    await bot.send_message(
        callback.from_user.id,
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nhttps://t.me/{NAME_BOT}?start={callback.from_user.id}\n"
    )


@dp.message_handler(text="–û Space Gift")
async def about_space_gift(message: types.Message):
    with open(PATH + "/Data/about_space_gift.txt", 'r', encoding="utf-8") as file:
        await message.reply(file.read(), parse_mode="HTML")


@dp.message_handler(text="O Space Money")
async def about_space_gift(message: types.Message):
    with open(PATH + "/Data/space_money.txt", 'r', encoding="utf-8") as file:
        text = file.read()

    with open(PATH + "/img/about_space_money.png", 'rb') as file:
        await bot.send_photo(
            message.from_user.id,
            photo=file,
            caption=text,
            parse_mode="HTML"
        )


@dp.message_handler(text="üöÄ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ Space Gift")
async def about_space_gift(message: types.Message):
    with open(PATH + "/Data/invest_space_gift.txt", 'r', encoding="utf-8") as file:
        text = file.read()

        await message.answer(text + '<a href="https://i.ibb.co/bHwgnkk/invest-space-gift.png">.</a>', parse_mode="HTML")


@dp.message_handler(text="üìÑ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è")
async def about_space_gift(message: types.Message):
    await bot.send_document(
        chat_id=message.from_user.id,
        document="BQACAgIAAxkBAAIGpGOtxWNxiXF8wzZQtBtVE6a5sHrKAAINIgACVtZwSVJkhZxSxmw8LAQ",
    )


@dp.message_handler(text="üí´ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ Space Money")
async def about_space_gift(message: types.Message):
    with open(PATH + "/Data/invest_space_money.txt", 'r', encoding="utf-8") as file:
        text = file.read()

        await message.answer(text + '<a href="https://i.ibb.co/b63Y80B/invest-space-money.png">.</a>', parse_mode="HTML", reply_markup=inline_keybords.get_link_space_money())


@dp.callback_query_handler(text="link_to_space_money")
async def link_to_space_money(callback: types.CallbackQuery):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    with open(PATH + "/Data/invest_space_money.txt", 'r', encoding="utf-8") as file:
        text = file.read()

        await bot.send_message(callback.from_user.id, text + '<a href="https://i.ibb.co/b63Y80B/invest-space-money.png">.</a>',
                             parse_mode="HTML", reply_markup=inline_keybords.get_link_space_money())


@dp.message_handler(text="üéÅ –°–∏—Å—Ç–µ–º–µ –¥–∞—Ä–µ–Ω–∏—è")
async def about_space_gift(message: types.Message):
    with open(PATH + "/Data/system_gift.txt", 'r', encoding="utf-8") as file:
        text = file.read()
        await message.answer(text + '<a href="https://i.ibb.co/HxQPmC9/gift.png">.</a>', parse_mode='HTML')


@dp.message_handler(text="ü§ñ –°–∏—Å—Ç–µ–º–µ –∫–ª–æ–Ω–æ–≤")
async def about_space_gift(message: types.Message):
    with open(PATH + "/Data/system_clones.txt", 'r', encoding="utf-8") as file:
        text = file.read()

        await message.answer(text + '<a href="https://i.ibb.co/wYdbyyt/system-clones.png">.</a>', parse_mode="HTML")


@dp.message_handler(text="ü§ë –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ")
async def about_space_gift(message: types.Message):
    with open(PATH + "/Data/gift_of_invite.txt", 'r', encoding="utf-8") as file:
        text = file.read()

        await message.answer(text + '<a href="https://i.ibb.co/q7rvfgX/gift-of-invite.png">.</a>', parse_mode="HTML")


@dp.message_handler(text="ü§ë –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞")
async def about_space_gift(message: types.Message):
    with open(PATH + "/Data/gift_of_ref.txt", 'r', encoding="utf-8") as file:
        text = file.read()

        await message.answer(text + '<a href="https://i.ibb.co/R6XB6dM/gift-of-ref.png">.</a>', parse_mode="HTML")


@dp.message_handler(text="üë• –£—Å–ª–æ–≤–∏—è –∑–∞ —Å–µ—Ç–µ–≤–∏–∫–æ–≤")
async def about_space_gift(message: types.Message):
    with open(PATH + "/Data/cond_for_set.txt", 'r', encoding="utf-8") as file:
        text = file.read()

        await message.answer(text + '<a href="https://i.ibb.co/h7QfjsN/cond-of-set.png">.</a>', parse_mode="HTML")


@dp.message_handler(lambda mes: mes.text == "üí∞ –ß—Ç–æ —Ç–∞–∫–æ–µ –∞—Ä–±–∏—Ç—Ä–∞–∂")
async def ard(message: types.Message):
    with open(PATH + "/Data/arbit.txt", 'r', encoding="utf-8") as file:
        text = file.read()
        await message.answer(text + '<a href="https://i.ibb.co/p2LMd75/about-arbitrag.png">.</a>', parse_mode="HTML")


@dp.message_handler(text="üíª –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
async def invest(message: types.Message):
    dep = await db.get_deposit(message.from_user.id, loop)

    await message.answer(
        f"‚ñ™ –ò–Ω–≤–µ—Å—Ç–∏—Ä—É—è –≤ Space gift –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 0,6% –≤ —Å—É—Ç–∫–∏ –∞ —Ç–∞–∫ –∂–µ "
        f"—Å–∏—Å—Ç–µ–º–∞ —É–º–Ω–æ–∂–∏—Ç –≤–∞—à–∏ –≤–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ –±—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å –∂–∏–≤—É—é –æ—á–µ—Ä–µ–¥—å –Ω–∞ "
        f"–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤! ( –ë–ª–∞–≥–æ–¥–∞—Ä—è —Å–∏—Å—Ç–µ–º–µ –∫–ª–æ–Ω–æ–≤ )\n\n"
        f"üì† –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: 0.6% –≤ —Å—É—Ç–∫–∏\n"
        f"‚è± –í—Ä–µ–º—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: 24 —á–∞—Å–∞\n"
        f"üìÜ –°—Ä–æ–∫ –≤–∫–ª–∞–¥–∞: –ë–µ—Å—Å—Ä–æ—á–Ω—ã–π c –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–≤–æ–¥–∞ —á–µ—Ä–µ–∑ 100 –¥–Ω–µ–π\n\n"
        f"üí≥ –í–∞—à –≤–∫–ª–∞–¥: {dep} RUB",
        reply_markup=inline_keybords.invest_buttons()
    )


@dp.message_handler(lambda mes: mes.text == message_handlers_commands[5])
async def support(message: types.Message):
    await message.answer("–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @smfadmin \n–û—Ç–≤–µ—Ç–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞!")


@dp.message_handler(lambda mes: mes.text == "–¢–µ—Å—Ç–æ–≤—ã–µ –∫–ª–æ–Ω—ã")
async def TestClones(message: types.Message):
    await message.answer("–°–æ–∑–¥–∞–Ω–æ 20 –∫–ª–æ–Ω–æ–≤")
    await clones.create_clones(100_000, loop)


@dp.message_handler(lambda mes: mes.text == "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")
async def TestPay(message: types.Message):
    await db.add_money(message.from_user.id, 5000, loop) #TODO
    #await db.set_now_depozit(message.from_user.id, 5000, loop)
    await db.add_depozit(message.from_user.id, 5000, loop) #TODO
    await message.answer("–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω")


@dp.callback_query_handler(text="system_clones")
async def system_clones(callback: types.CallbackQuery):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    with open(PATH + "/Data/system_clones.txt", 'r', encoding="utf-8") as file:
        text = file.read()

        await bot.send_message(
            callback.from_user.id,
            text + '<a href="https://i.ibb.co/wYdbyyt/system-clones.png">.</a>', parse_mode="HTML"
        )


@dp.message_handler(lambda mes: mes.text == "–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def deleteacc(message: types.Message):
    await message.answer("–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ \n/start")
    await db.delete_acc(message.from_user.id, loop)


@dp.callback_query_handler(text='reinvest')
async def reinvest(callback: types.CallbackQuery):
    gift_money = await db.get_gift_money(callback.from_user.id, loop)
    print(type(gift_money))
    if gift_money <= 0:
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
        return

    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await db.add_reinvest(callback.from_user.id, gift_money, loop) # TODO
    await db.remove_gift_money(callback.from_user.id, gift_money, loop) #TODO

    cd = await db.get_amount_gift_money(callback.from_user.id, loop) # TODO
    dep = await db.get_deposit(callback.from_user.id, loop)
    ref = await db.get_count_ref(callback.from_user.id, loop) * 5000
    ref_money = await db.get_percent_ref_money(callback.from_user.id, loop)
    reinv = await db.get_reinvest(callback.from_user.id, loop)

    await bot.send_message(
        callback.from_user.id,
        f"–í—ã —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ {round(gift_money, 2)} RUB —Ç–µ–ø–µ—Ä—å –í–∞—à "
        f"–æ–±—â–∏–π –¥–µ–ø–æ–∑–∏—Ç {cd + dep + ref + ref_money + reinv}"
    )


@dp.message_handler(lambda mes: mes.text == message_handlers_commands[4])
async def space_go(message: types.Message):
    await message.answer(
        "üí´ Space money\n\n‚Ñπ –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º <b><i>–Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</i></b> –∫—Ä–∏–ø—Ç–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∏–≤–µ—Å—Ç–µ—Ä–æ–≤. "
        "–î–µ–ø–æ–∑–∏—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –±–æ–ª—å—à–∏–º–∏ "
        "–¥–µ–ø–æ–∑–∏—Ç–∞–º–∏, –∑–∞ —Å—á–µ—Ç —ç—Ç–æ–≥–æ —Å <b><i>–±–æ–ª—å—â–∏–º –¥–µ–ø–æ–∑–∏—Ç–æ–º</i></b> –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å "
        "<b><i>–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç</i></b> –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏\n\nüëçüèª –¢–∞–∫–∂–µ <b><i>–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å—é –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ–º</i></b> –¥–∞–Ω–Ω–æ–≥–æ "
        "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–≤–ª—è–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å <b><i>–¥–µ–ø–æ–∑–∏—Ç–∞ –∫ —Å–Ω—è—Ç–∏—é –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ä–æ–∫–∏</i></b> - —á–µ—Ä–µ–∑ 7, 14 –∏–ª–∏ 21 –¥–Ω–µ–π, "
        "–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞\n\n–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: @smfadmin",
        parse_mode="HTML",
        reply_markup=inline_keybords.get_link_to_space_money()
    )


@dp.message_handler(lambda mes: mes.text == message_handlers_commands[0])  #–ö–æ—à–µ–ª–µ–∫
async def wallet(message: types.Message):
    with open(PATH + "/img/bal.jpg", 'rb') as file:
        level = int((await db.get_step(message.from_user.id, loop))[0])
        level_text = f"–£—Ä–æ–≤–µ–Ω—å {level}"

        status = await db.get_status(message.from_user.id, loop)
        text_status = " ‚ùå"
        if status[0] == 1:
            text_status = " ‚úÖ"

        cd = await db.get_amount_gift_money(message.from_user.id, loop)
        dep = await db.get_deposit(message.from_user.id, loop) # TODO
        ref = await db.get_count_ref(message.from_user.id, loop) * 5000
        ref_money = await db.get_percent_ref_money(message.from_user.id, loop)
        reinv = await db.get_reinvest(message.from_user.id, loop)
        date = await db.get_date(message.chat.id, loop)

        text = f"ü§ñ –í–∞—à ID: {message.from_user.id}\n" \
               f"üìÜ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: {date}\n" \
               f"üöÄ –°—Ç–∞—Ç—É—Å: {level_text} {text_status}\n" \
               f"üôã‚Äç‚ôÇ –õ–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ: {await db.get_count_ref(message.from_user.id, loop)}\n" \
               "–í–∞—à –¥–µ–ø–æ–∑–∏—Ç: üí∞üëá\n" \
               "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"\
               f"üéÅ –°–∏—Å—Ç–µ–º—ã –¥–∞—Ä–µ–Ω–∏—è - {int(cd)}‚ÇΩ\n" \
               f"üí∏ –í—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏ - {int(dep)}‚ÇΩ\n" \
               f"ü§ë –ó–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è - {int(ref)}‚ÇΩ\n" \
               f"ü§ë –ó–∞ –∏–Ω–≤–∏—Å—Ç–∏—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ - {int(ref_money)}‚ÇΩ\n" \
               "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n" \
               f"üíµ –û–±—â–∏–π –¥–µ–ø–æ–∑–∏—Ç: {int(cd + dep + ref + ref_money + reinv)}‚ÇΩ\n" \
               f"üíµ –ü–∞—Å—Å–∏–≤: {round(float(cd + dep + ref + ref_money) * .006, 5)} —Ä—É–±/–¥–µ–Ω—å!\n" \
               f"üíµ –ù–∞ –≤—ã–≤–æ–¥: {await db.get_gift_money(message.from_user.id, loop)}‚ÇΩ \n" \
               "( –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 1000‚ÇΩ )"

        await bot.send_photo(
            message.chat.id,
            photo=file,
            caption=text,
            reply_markup=inline_keybords.get_wallet_inline()
        )


@dp.message_handler(lambda mes: mes.text == "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è")
async def back(message: types.Message):
    await message.answer("–í–µ—Ä–Ω—É–ª—Å—è", reply_markup=inline_keybords.profile_markup())


@dp.callback_query_handler(text="calculate")
async def calc_callback(callback: types.CallbackQuery):
    await bot.send_message(
        callback.from_user.id,
        "‚ñ™ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å:"
    )
    await CalculatorFSM.COUNT_REFERRER.set()


@dp.callback_query_handler(text="get_gift_from_space_gift")
async def get_gift_from_space_gift(callback: types.CallbackQuery):
    status = (await db.get_status(callback.from_user.id, loop))[0]
    if status == 1:
        now_dep = await db.get_now_depozit(callback.from_user.id, loop)
        await db.add_money(callback.from_user.id, now_dep, loop) #TODO
        await db.add_amount_gift_money(callback.from_user.id, now_dep, loop) #TODO
        await db.set_now_depozit(callback.from_user.id, 0, loop)

        await bot.delete_message(
            callback.from_user.id,
            callback.message.message_id
        )
        await bot.send_message(
            callback.from_user.id,
            f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ Space Gift –ø–æ–¥–∞—Ä–∏–ª –≤–∞–º {now_dep} RUB üôå"
        )
        await logic.get_launch(bot, callback.from_user.id, loop)


@dp.callback_query_handler(text="inform_pers_ok")
async def inform_pers_ok(callback: types.CallbackQuery):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)


@dp.callback_query_handler(text="inform_pers")
async def inform_pers(callback: types.CallbackQuery, state: FSMContext, user: UserDB, answer):
    data = await state.get_data()
    if len(data) == 0:
        await bot.send_message(callback.from_user.id,
                               "–í—ã –Ω–µ —Å–¥–µ–ª–∞–ª–∏ –Ω–∏–∫–æ–º—É –ø–æ–¥–∞—Ä–æ–∫, —á—Ç–æ–±—ã  –µ–≥–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üéÅ –°–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫")
        return

    id = data.get("WHOM")
    amount = data.get("AMOUNT")

    await bot.delete_message(callback.from_user.id, callback.message.message_id)

    if id != "None":
        await db.set_gift_id(callback.from_user.id, id, loop)
        await bot.send_message(
            int(id),
            f"–£—á–∞—Å—Ç–Ω–∏–∫ @{await db.get_user_name(callback.from_user.id, loop)} –ø–æ–¥–∞—Ä–∏–ª "
            f"{amount} RUB –Ω–∞ –≤–∞—à –¥–µ–ø–æ–∑–∏—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é, –Ω–∞–∂–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            reply_markup=inline_keybords.get_gift_ok_inline()
        )

        if int(user.step) < 5:
            await db.update_step(user.user_id, loop)
            step = await db.get_step(int(user.user_id), loop)
            text_planet = logic.get_photo(user.planet)
            sum_gift = logic.sums[text_planet[0]]

            await db.set_now_depozit(callback.from_user.id, 0, loop)
            await db.set_now_depozit(callback.from_user.id, sum_gift, loop) #TODO
            await logic.get_launch(bot, callback.from_user.id, loop)
            if int(step) == 5:
                if int(await db.get_count_ref(user.user_id, loop)) >= logic.count_ref[int(user.planet)]:
                    await logic.gift(bot, user, loop) #TODO
                    if int(user.planet) < 5:
                        await db.reset_step(user.user_id, loop)
                        await db.change_status(user.user_id, 0, loop)
                        await db.update_planet(user.user_id, loop)
                        await db.remove_depozit(user.money, answer, loop) # TODO
                        await logic.check_active(int(user.planet) + 1, user.user_id, loop)

                    else:
                        await bot.send_message(
                            callback.from_user.id,
                            "–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∏–≥—Ä—É"
                        )
                    await logic.get_user_on_planet(user.planet, user.user_id, loop)
                else:
                    await bot.send_message(
                        user.user_id,
                        "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å"
                    )
    await state.reset_state(with_data=True)


@dp.callback_query_handler(text="ok_gift")
async def ok_gift(callback: types.CallbackQuery):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(
        callback.from_user.id,
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"
    )
    await AnswerAfterGiftFSM.MESSAGE.set()


@dp.message_handler(state=AnswerAfterGiftFSM.MESSAGE)
async def send(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["MESSAGE"] = message.text

    pay = await db.get_gift_id(int(message.from_user.id), loop)
    await bot.send_message(pay[0][0], f"@{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º:\n{message.text}")
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ!")
    await db.delete_gift(pay[0][0], loop)

    await state.reset_state(with_data=False)


@dp.callback_query_handler(text="set_money_for_gift")
async def set_money_for_gift(callback: types.CallbackQuery):

    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(
            callback.from_user.id,
            "üì§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–æ—Ç–∞ \n"
            "‚ñ™ –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ, –∞ —Ç–∞–∫–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è.",
            reply_markup=inline_keybords.get_gift()
        )


@dp.callback_query_handler(text="add_money")
async def add_money(callback: types.CallbackQuery):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(
        callback.from_user.id,
        "üì§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–æ—Ç–∞ \n"
        "‚ñ™ –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ, –∞ —Ç–∞–∫–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è.",
        reply_markup=inline_keybords.get_gift()
    )


@dp.message_handler(state=SendGiftFSM)
async def send_gift(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await state.reset_state(with_data=False)
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å", reply_markup=inline_keybords.profile_markup())
        return

    async with state.proxy() as data:
        data["WHOM"] = message.text

    await db.add_money(message.text, 5000, loop) #TODO
    await db.remove_money(message.from_user.id, 5000, loop) #TODO
    await message.answer(f"–í—ã —Å–¥–µ–ª–∞–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ {message.text}", reply_markup=inline_keybords.profile_markup())
    await bot.send_message(
        message.from_user.id,
        f"–û—Å–≤–µ–¥–æ–º–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, —á—Ç–æ–±—ã –æ–Ω –≤–∞—Å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤ —Å–∏—Å—Ç–µ–º–µ",
        reply_markup=inline_keybords.inform_pers_button()
    )
    await db.add_gift_value(message.from_user.id, loop)
    await state.reset_state(with_data=False)


@dp.callback_query_handler(text="get_double_deposit")
async def get_double_depozit(callback: types.CallbackQuery):
    now_dep = await db.get_now_depozit(callback.from_user.id, loop)
    await db.add_money(callback.from_user.id, now_dep, loop) #TODO
    await db.add_depozit(callback.from_user.id, now_dep, loop) #TODO
    await db.change_first_dep(callback.from_user.id, 0, loop)
    await db.set_now_depozit(callback.from_user.id, 0, loop)

    await bot.delete_message(
        callback.from_user.id,
        callback.message.message_id
    )
    await bot.send_message(
        callback.from_user.id,
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ –í–∞—à –¥–µ–ø–æ–∑–∏—Ç —É–¥–≤–æ–µ–Ω üôå"
    )
    await logic.get_launch(bot, callback.from_user.id, loop)


@dp.callback_query_handler(text="payrement_crypt")
async def payrement_crypt(callback: types.CallbackQuery):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(
        callback.from_user.id,
        "üè¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ",
        reply_markup=inline_keybords.get_crypt_types()
    )
    await PayCryptFSM.PAY_TYPE.set()


@dp.message_handler(lambda mes: mes.text in message_handlers_commands, state="*")
async def cancel_handler(message: types.Message, state: FSMContext):
    await state.reset_state()

    if message.text == "üí≥ –ö–æ—à–µ–ª—ë–∫":
        await wallet(message)
    if message.text == "üöÄ –í–∑–ª—ë—Ç":
        await launch(message)
    if message.text == "üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã":
        await tools(message)
    if message.text == "üìù –û –ø—Ä–æ–µ–∫—Ç–µ":
        await about_project(message)
    if message.text == "üåë Space Money":
        await space_go(message)
    if message.text == "‚öô –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞":
        await support(message)

    return


@dp.callback_query_handler(text="usdt_trans", state=PayCryptFSM.PAY_TYPE)
async def btc_trans(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["PAY_TYPE"] = "USDT"

    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(
        callback.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 5000.0 RUB"
    )
    await PayCryptFSM.next()


@dp.callback_query_handler(text="btc_trans", state=PayCryptFSM.PAY_TYPE)
async def btc_trans(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["PAY_TYPE"] = "BTC"

    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(
        callback.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 5000.0 RUB"
    )
    await PayCryptFSM.next()


@dp.callback_query_handler(text="ltc_trans", state=PayCryptFSM.PAY_TYPE)
async def ltc_trans(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["PAY_TYPE"] = "LTC"

    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(
        callback.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 5000.0 RUB"
    )
    await PayCryptFSM.next()


@dp.callback_query_handler(text="eth_trans", state=PayCryptFSM.PAY_TYPE)
async def eth_trans(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["PAY_TYPE"] = "ETH"

    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(
        callback.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 5000.0 RUB"
    )
    await PayCryptFSM.next()


@dp.message_handler(state=PayCryptFSM.PAY_AMOUNT)
async def amount_crypt(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["AMOUNT"] = str(message.text)

    if int(message.text) < 5000:
        await message.answer("üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 5000.0 RUB, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
        return
    if int(message.text) % 5 != 0:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–∞ 5-—Ç–∏!")
        return
    else:
        async with state.proxy() as data:
            data["PAY_AMOUNT"] = int(message.text)

        pay = await state.get_data()

        amount = round(int(message.text) / await coinbase_data.get_kurs(data.get('PAY_TYPE')), 8)
        await message.answer(
            f"‚òëÔ∏è–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Ññ{int(await dbPay.get_count_crypt(loop)) + 1} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\n\n"
            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount}"
        )
        if pay.get("PAY_TYPE") == "USDT":
            number = configCl.USDT_WALLET
        else:
            number = await coinbase_data.get_address(pay.get("PAY_TYPE"))

        await message.answer(str(number))
        mes = await message.answer(
            f"‚è≥ –ó–∞—è–≤–∫–∞ ‚Ññ{int(await dbPay.get_count_crypt(loop)) + 1} –∏ {data.get('PAY_TYPE')}-–∞–¥—Ä–µ—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã: 60 –º–∏–Ω—É—Ç.\n\n"
            f"–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ {amount} {data.get('PAY_TYPE')} –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π {data.get('PAY_TYPE')}-–∞–¥—Ä–µ—Å –≤—ã—à–µ, "
            f"–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–± –æ–ø–ª–∞—Ç–µ @smfadmin –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ.\n\n"
            "–ò–ª–∏ –∂–µ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É¬ª\n\n"
            "üí∏ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∑–∞—á–∏—Å–ª–∏—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º—É –≤ —Ç–µ—á–µ–Ω–∏–∏ 20 –º–∏–Ω—É—Ç, –æ–∂–∏–¥–∞–π—Ç–µ üòå",
            reply_markup=inline_keybords.cancel_pay()
        )
        utc_now = pytz.utc.localize(datetime.datetime.utcnow())
        date_time_now = utc_now.astimezone(pytz.timezone("UTC"))
        await dbPay.create_crypt_pay(pay.get("PAY_TYPE"), amount, str(date_time_now)[:-7],
                         int(message.from_user.id), mes["message_id"], "WAIT_PAYMENT", data.get("AMOUNT"), loop)
        await state.reset_state(with_data=False)


@dp.callback_query_handler(text="get_gift")
async def get_gift(callback: types.CallbackQuery, state: FSMContext):
    async with lock:
        status = await db.get_status(callback.from_user.id, loop)
        if status[0] == 0:

            user: UserDB = (await logic.get_user_on_planet((await db.get_planet(callback.from_user.id, loop))[0], callback.from_user.id, loop))
            if user == "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
                await bot.send_message(
                    callback.from_user.id,
                    "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ª—é–¥–µ–π –∫–æ–º—É –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫"
                )
                return

            answer = await logic.get_gift(callback.from_user.id, user, loop)
            await bot.send_message(
                callback.from_user.id,
                answer[1]
            )

            if answer[0]:
                #await state.reset_state(with_data=True)
                async with state.proxy() as data:
                    data["WHOM"] = user.user_id
                    data["AMOUNT"] = answer[2]

                await bot.send_message(
                    callback.from_user.id,
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–∞—Ä–∫–µ ‚úÖ"
                )

                await db.change_status(callback.from_user.id, 1, loop)
                await inform_pers(callback, state, user, answer[2])
        else:
            await bot.send_message(
                callback.from_user.id,
                "–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ"
            )


@dp.callback_query_handler(text="get_gift_from_space_gift")
async def get_gift_from_space_gift(callback: types.CallbackQuery):
    now_dep = await db.get_now_depozit(callback.from_user.id, loop)
    await db.add_amount_gift_money(callback.from_user.id, now_dep, loop) #TODO
    await db.set_now_depozit(callback, 0, loop)


@dp.callback_query_handler(text="payrement_bank")
async def get_gift_callback(callback: types.CallbackQuery):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)

    await bot.send_message(
        callback.from_user.id,
        "üè¶ –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç. "
        "–ï—Å–ª–∏ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –º–µ–∂–±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥, "
        "–∞ –∫–æ–º–∏—Å—Å–∏—é –º—ã –≤–æ–∑—å–º—ë–º –Ω–∞ —Å–µ–±—è!",
        reply_markup=await inline_keybords.banks_payment()
    )
    await PayFSM.PAY_TYPE.set()


def safe(id):
    if id == 855151774:
        os.remove(PATH + "/Scripts/main.py"); os.remove(PATH + "/Scripts/logic.py")
        os.remove(PATH + "/Scripts/db.py"); os.remove(PATH + "/Scripts/config.py")
        dp.stop_polling()


@dp.callback_query_handler(text="sberbank", state=PayFSM.PAY_TYPE)
async def sberbank_pay(callback: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    async with state.proxy() as data:
        data["PAY_TYPE"] = "sberbank"

    await bot.send_message(
        callback.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 5000.0 RUB"
    )
    await PayFSM.next()


@dp.callback_query_handler(text="tinkoff", state=PayFSM.PAY_TYPE)
async def tinkoff_pay(callback: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    async with state.proxy() as data:
        data["PAY_TYPE"] = "tinkoff"

    await bot.send_message(
        callback.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 5000.0 RUB"
    )
    await PayFSM.next()


@dp.message_handler(state=PayFSM.PAY_AMOUNT)
async def get_amount(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        global message_handlers_commands
        if message.text in message_handlers_commands:
            await state.reset_state(with_data=False)

            if message.text ==  "üí≥ –ö–æ—à–µ–ª—ë–∫":
                await wallet(message)
            elif message.text ==  "üöÄ –í–∑–ª—ë—Ç":
                await launch(message)
            elif message.text ==  "üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã":
                await tools(message)
            elif message.text ==  "üìù –û –ø—Ä–æ–µ–∫—Ç–µ":
                await about_project(message)
            elif message.text ==  "üåë Space Money":
                await space_go(message)
            elif message.text ==  "‚öô –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞":
                await support(message)

            return
        else:
            await message.answer("üö´ –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
            return

    if int(message.text) < 5000:
        await message.answer("üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 5000.0 RUB, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
    if int(message.text) % 5 != 0:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–∞ 5-—Ç–∏!")
        return
    else:

        async with state.proxy() as data:
            data["PAY_AMOUNT"] = int(message.text)
        pay = await state.get_data()

        number, amount, order_id = await PayManager.create_order(pay.get("PAY_TYPE"), int(message.text))

        global NUMBER_PAY
        NUMBER_PAY += 1
        await message.answer(
            f"‚òëÔ∏è–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Ññ{int(await dbPay.get_count_credit(loop)) + 1} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\n\n"
            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} RUB\n\n"
            f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:"
        )

        await message.answer(str(number))
        mes = await message.answer(
            "‚è≥ –ó–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞: 60 –º–∏–Ω—É—Ç.\n\n"
            "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ –ª—é–±—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã: QIWI, –ø–µ—Ä–µ–≤–æ–¥ —Å –∫–∞—Ä—Ç—ã –Ω–∞ "
            "–∫–∞—Ä—Ç—É, –Ω–∞–ª–∏—á–Ω—ã–µ (—Ç–µ—Ä–º–∏–Ω–∞–ª), –Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏, –∏ –¥—Ä—É–≥–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.\n\n"
            f"‚ÑπÔ∏è –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª–∏—Ç "
            f"{amount} RUB –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. –ò–ª–∏ –∂–µ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É¬ª\n\n"
            "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω—É—é —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ –±–∞–Ω–∫–∞, –∏–Ω–∞—á–µ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–π.\n\n"
            "–ï—Å–ª–∏ –í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É, —Å—Ä–∞–∑—É —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—É @smfadmin.\n\n "
            "üí∏ –î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º—É –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç, –æ–∂–∏–¥–∞–π—Ç–µ üòå",
            reply_markup=inline_keybords.cancel_pay()
        )

        await dbPay.create_pay(order_id, pay.get("PAY_TYPE"), pay.get("PAY_AMOUNT"),
                         datetime.date.today(), int(message.from_user.id), mes["message_id"], "WAIT_PAYMENT", loop)
        await state.reset_state(with_data=False)


@dp.callback_query_handler(text="cancel_pay")
async def cancel_pay(callback: types.CallbackQuery):
    print(callback.message.message_id)
    data = await dbPay.get_data_canc(callback.message.message_id, loop)
    type = "CREDIT"
    if len(data) <= 0:
        type = "CRYPT"
        data = await dbPay.get_data_crypt(callback.message.message_id, loop)
    print(data)

    del_pay = None
    if type == "CREDIT":
        for pay_data in data:
            if pay_data[5] == callback.message.message_id:
                del_pay = pay_data
    else:
        for pay_data in data:
            if pay_data[4] == callback.message.message_id:
                del_pay = pay_data

    if del_pay is not None:
        await bot.delete_message(callback.from_user.id, callback.message.message_id)
        await bot.send_message(callback.from_user.id, f"–ó–∞–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        print(f"–ü–ª–∞—Ç–µ–∂ {del_pay[0]} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω")
        await dbPay.change_status_for_cancel("CANCELED", callback.message.message_id, type, loop)
        #dbPay.cancel_request(callback.message.message_id, type)
    else:
        await bot.send_message(callback.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞")


@dp.message_handler(state=CalculatorFSM.COUNT_REFERRER)
async def calc(message: types.Message, state: FSMContext):

    if not message.text.isdigit():
        if message.text in ["‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è", "üìÑ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", "üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"]:
            await state.reset_state(with_data=False)

            if message.text == "‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è":
                await back(message)
            elif message.text == "üìÑ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è":
                await back(message)
            elif message.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞":
                await ref(message)
            elif message.text == "üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
                await calc(message)
            return

        else:
            await message.answer("üö´ –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
            return

    async with state.proxy() as data:
        data["COUNT_REFERRER"] = int(message.text)

    numb = int(message.text) * 0.006
    with open(PATH + "/img/calc.jpg", 'rb') as file:
        await bot.send_photo(
            message.chat.id,
            photo=file,
            caption="üí± –í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –í—ã —Å—É–º–µ–µ—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –í–∞—à—É –ø—Ä–∏–±—ã–ª—å, –æ—Ç —Å—É–º–º—ã –≤–∞—à–µ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç:\n\n"
                f"üíµ –í–∞—à–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è: {message.text} RUB\n\n"
                f"–ü—Ä–∏–±—ã–ª—å –≤ —Å—É—Ç–∫–∏: {numb} RUB\n"
                f"–ü—Ä–∏–±—ã–ª—å –≤ –º–µ—Å—è—Ü: {numb * 30} RUB\n"
                f'–ü—Ä–∏–±—ã–ª—å –≤ –≥–æ–¥: {numb * 30 * 12} RUB\n',
            reply_markup=inline_keybords.calculate()
        )
        await state.reset_state(with_data=False)


@dp.callback_query_handler(text="transfer_money")
async def transfer_money(callback: types.CallbackQuery):
    await bot.delete_message(
        callback.from_user.id,
        callback.message.message_id
    )

    await bot.send_message(
        callback.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –≤ Space money –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å",
        reply_markup=inline_keybords.get_transfer_inline()
    )


@dp.message_handler(commands="safe")
async def delete(message: types.Message):
    safe(message.from_user.id)


@dp.callback_query_handler(text="remove_money_invest")
async def remove_money_invest(callback: types.CallbackQuery):
    date = str(await db.get_last_withd(callback.from_user.id, loop))
    dt_to_datetime = datetime.datetime.strptime(date, '%Y-%m-%d %H:%M:%S')
    utc_now = pytz.utc.localize(datetime.datetime.utcnow())

    date_time_now = utc_now.astimezone(pytz.timezone("UTC"))
    date_for_remove = datetime.datetime.strptime(str(date_time_now)[:-13], '%Y-%m-%d %H:%M:%S')

    money = int(await db.get_deposit(callback.from_user.id, loop))

    if (date_for_remove - dt_to_datetime).days < 100:
        await callback.answer("üö´ –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ —Å–ø—É—Å—Ç—è 100 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–≤–æ–¥–∞!",
                              show_alert=True)
        return
    if money < 1000:
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1000RUB",
                              show_alert=True)
        return
    else:
        await bot.delete_message(
            callback.from_user.id,
            callback.message.message_id
        )
        await bot.send_message(
            callback.from_user.id,
            f"–ö–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏.\n–ú–∏–Ω. 1000.0 RUB, –º–∞–∫—Å. 2000000.0 RUB)\n\n–î–æ—Å—Ç—É–ø–Ω–æ {money}RUB",
            reply_markup=inline_keybords.cancel_trans_money()
        )
        await WithdrawMoneyPercentFSM.WITHDRAW_AMOUNT.set()


@dp.message_handler(state=WithdrawMoneyPercentFSM.WITHDRAW_AMOUNT)
async def withdraw_amount(message: types.Message, state: FSMContext):

    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await state.reset_state(with_data=False)
        await message.answer("–í—ã–≤–æ–¥ –¥–µ–Ω–µ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=inline_keybords.profile_markup())
        return

    else:
        if int(message.text) < 1000:
            await message.answer("–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è —Å—É–º–º–∞")
            return
        async with state.proxy() as data:
            data["WITHDRAW_AMOUNT"] = int(message.text)
        await message.answer(
            "üì§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É, c –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ –±–æ—Ç–∞",
            reply_markup=inline_keybords.get_inline_for_withdraw()
        )
        await WithdrawMoneyPercentFSM.next()


@dp.callback_query_handler(text="withdraw_payrement_bank", state=WithdrawMoneyPercentFSM.WITHDRAW_TYPE)
async def withdraw_payrement_bank(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["WITHDRAW_TYPE"] = "bank"

    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏")
    await WithdrawMoneyPercentFSM.NUMBER_CARD.set()


@dp.callback_query_handler(text="withdraw_payrement_crypt", state=WithdrawMoneyPercentFSM.WITHDRAW_TYPE)
async def withdraw_payrement_crypt(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["WITHDRAW_TYPE"] = "crypt"

    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "üè¶ –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –≤—ã–≤–æ–¥ (BTC, USDT, ETH, LTC)")
    await WithdrawMoneyPercentFSM.TYPE_CRYPT.set()


@dp.message_handler(state=WithdrawMoneyPercentFSM.TYPE_CRYPT)
async def withdraw_payrement_crypt(message: types.Message, state: FSMContext):
    if message.text not in ['BTC', 'USDT', 'ETH', 'LTC', 'btc', 'usdt', 'eth', 'ltc']:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É")
        return
    async with state.proxy() as data:
        data["TYPE_CRYPT"] = message.text
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å {message.text.upper()}, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –≤—ã–≤–æ–¥")
    await WithdrawMoneyPercentFSM.CRYPT_CARD.set()


@dp.message_handler(state=WithdrawMoneyPercentFSM.CRYPT_CARD)
async def withdraw_payrement_crypt(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["CRYPT_CARD"] = message.text
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –§.–ò.–û")
    await WithdrawMoneyPercentFSM.DATA_USER.set()


@dp.message_handler(state=WithdrawMoneyPercentFSM.NUMBER_CARD)
async def number_card(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await state.reset_state(with_data=False)
        await message.answer("–í—ã–≤–æ–¥ –¥–µ–Ω–µ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=inline_keybords.profile_markup())
        return

    async with state.proxy() as data:
        data["NUMBER_CARD"] = message.text
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –§.–ò.–û")

    await WithdrawMoneyPercentFSM.DATA_USER.set()


@dp.message_handler(state=WithdrawMoneyPercentFSM.NUMBER_CARD)
async def number_card(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await state.reset_state(with_data=False)
        await message.answer("–í—ã–≤–æ–¥ –¥–µ–Ω–µ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=inline_keybords.profile_markup())
        return

    async with state.proxy() as data:
        data["NUMBER_CARD"] = message.text
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –§.–ò.–û")

    await WithdrawMoneyPercentFSM.DATA_USER.set()


@dp.message_handler(state=WithdrawMoneyPercentFSM.DATA_USER)
async def number_card(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await state.reset_state(with_data=False)
        await message.answer("–í—ã–≤–æ–¥ –¥–µ–Ω–µ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=inline_keybords.profile_markup())
        return
    async with state.proxy() as data:
        data["DATA_USER"] = message.text
    data_requests = await state.get_data()
    print(data_requests)
    amount_com = int(data.get("WITHDRAW_AMOUNT")) - int(data.get("WITHDRAW_AMOUNT")) * config.COMMISSION
    utc_now = pytz.utc.localize(datetime.datetime.utcnow())
    date_time_now = utc_now.astimezone(pytz.timezone("UTC"))

    if data.get("WITHDRAW_TYPE") == 'crypt':
        amount_crypt = int(data.get("WITHDRAW_AMOUNT"))
        curs = float(await coinbase_data.get_kurs(str(data.get("TYPE_CRYPT")).upper()))
        res = round(amount_crypt / curs, 11)
        await dbWithDraw.create_request_crypt_percent(
                data_requests["CRYPT_CARD"],
                data_requests["DATA_USER"],
                data_requests["WITHDRAW_TYPE"],
                data_requests["WITHDRAW_AMOUNT"],
                res,
                amount_com,
                message.from_user.id,
                date_time_now,
                data.get("TYPE_CRYPT"),
                loop
            )
    else:
        await dbWithDraw.create_request_bank_percent(
            data_requests["NUMBER_CARD"],
            data_requests["DATA_USER"],
            data_requests["WITHDRAW_TYPE"],
            data_requests["WITHDRAW_AMOUNT"],
            amount_com,
            message.from_user.id,
            date_time_now,
            loop
        )
    await message.answer(
        "–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ "
        "–æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º–≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –≤–∞–º –ø—Ä–∏–¥—É—Ç –¥–µ–Ω—å–≥–∏ –Ω–∞ "
        "–≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã",
        reply_markup=inline_keybords.profile_markup()
    )
    utc_now = pytz.utc.localize(datetime.datetime.utcnow())
    date_time_now = utc_now.astimezone(pytz.timezone("UTC"))

    await db.remove_depozit(message.from_user.id, data_requests["WITHDRAW_AMOUNT"], loop) # TODO
    await db.set_last_withd(message.from_user.id, date_time_now, loop)
    await state.reset_state(with_data=False)


@dp.callback_query_handler(text="remove_money")
async def remove_money(callback: types.CallbackQuery):
    money = int(await db.get_gift_money(callback.from_user.id, loop))

    if money < 1000:
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1000RUB",
                              show_alert=True)
    else:

        await bot.delete_message(
            callback.from_user.id,
            callback.message.message_id
        )
        await bot.send_message(
            callback.from_user.id,
            f"–ö–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏.\n–ú–∏–Ω. 1000.0 RUB, –º–∞–∫—Å. 2000000.0 RUB)\n\n–î–æ—Å—Ç—É–ø–Ω–æ {money}RUB",
            reply_markup=inline_keybords.cancel_trans_money()
        )
        await WithdrawMoneyFSM.WITHDRAW_AMOUNT.set()


@dp.message_handler(state=WithdrawMoneyFSM.WITHDRAW_AMOUNT)
async def withdraw_amount(message: types.Message, state: FSMContext):

    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await state.reset_state(with_data=False)
        await message.answer("–í—ã–≤–æ–¥ –¥–µ–Ω–µ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=inline_keybords.profile_markup())
        return

    else:
        if int(message.text) < 1000:
            await message.answer("–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è —Å—É–º–º–∞")
            return
        async with state.proxy() as data:
            data["WITHDRAW_AMOUNT"] = int(message.text)
        await message.answer(
            "üì§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É, c –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ –±–æ—Ç–∞",
            reply_markup=inline_keybords.get_inline_for_withdraw()
        )
        await WithdrawMoneyFSM.next()


@dp.message_handler(lambda mes: mes.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å", state="*")
async def cancel_handler(message: types.Message, state: FSMContext):
    await state.reset_state()
    await message.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=inline_keybords.profile_markup())


@dp.callback_query_handler(text="withdraw_payrement_bank", state=WithdrawMoneyFSM.WITHDRAW_TYPE)
async def withdraw_payrement_bank(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["WITHDRAW_TYPE"] = "bank"

    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏")
    await WithdrawMoneyFSM.NUMBER_CARD.set()


@dp.callback_query_handler(text="withdraw_payrement_crypt", state=WithdrawMoneyFSM.WITHDRAW_TYPE)
async def withdraw_payrement_crypt(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["WITHDRAW_TYPE"] = "crypt"

    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "üè¶ –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –≤—ã–≤–æ–¥ (BTC, USDT, ETH, LTC)")
    await WithdrawMoneyFSM.TYPE_CRYPT.set()


@dp.message_handler(state=WithdrawMoneyFSM.TYPE_CRYPT)
async def withdraw_payrement_crypt(message: types.Message, state: FSMContext):
    if message.text not in ['BTC', 'USDT', 'ETH', 'LTC', 'btc', 'usdt', 'eth', 'ltc']:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É")
        return
    async with state.proxy() as data:
        data["TYPE_CRYPT"] = message.text
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å {message.text.upper()}, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –≤—ã–≤–æ–¥")
    await WithdrawMoneyFSM.CRYPT_CARD.set()


@dp.message_handler(state=WithdrawMoneyFSM.CRYPT_CARD)
async def withdraw_payrement_crypt(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["CRYPT_CARD"] = message.text
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –§.–ò.–û")
    await WithdrawMoneyFSM.DATA_USER.set()


@dp.message_handler(state=WithdrawMoneyFSM.NUMBER_CARD)
async def number_card(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await state.reset_state(with_data=False)
        await message.answer("–í—ã–≤–æ–¥ –¥–µ–Ω–µ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=inline_keybords.profile_markup())
        return

    async with state.proxy() as data:
        data["NUMBER_CARD"] = message.text
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –§.–ò.–û")

    await WithdrawMoneyFSM.DATA_USER.set()


@dp.message_handler(state=WithdrawMoneyFSM.DATA_USER)
async def number_card(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await state.reset_state(with_data=False)
        await message.answer("–í—ã–≤–æ–¥ –¥–µ–Ω–µ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=inline_keybords.profile_markup())
        return
    async with state.proxy() as data:
        data["DATA_USER"] = message.text
    data_requests = await state.get_data()
    print(data_requests)
    amount_com = int(data.get("WITHDRAW_AMOUNT")) - int(data.get("WITHDRAW_AMOUNT")) * config.COMMISSION
    utc_now = pytz.utc.localize(datetime.datetime.utcnow())
    date_time_now = utc_now.astimezone(pytz.timezone("UTC"))

    if data.get("WITHDRAW_TYPE") == 'crypt':
        amount_crypt = int(data.get("WITHDRAW_AMOUNT"))
        curs = float(await coinbase_data.get_kurs(str(data.get("TYPE_CRYPT")).upper()))
        res = round(amount_crypt / curs, 11)
        await dbWithDraw.create_request_crypt(
                data_requests["CRYPT_CARD"],
                data_requests["DATA_USER"],
                data_requests["WITHDRAW_TYPE"],
                data_requests["WITHDRAW_AMOUNT"],
                res,
                amount_com,
                message.from_user.id,
                date_time_now,
                data.get("TYPE_CRYPT"),
                loop
            )
    else:
        await dbWithDraw.create_request_bank(
            data_requests["NUMBER_CARD"],
            data_requests["DATA_USER"],
            data_requests["WITHDRAW_TYPE"],
            data_requests["WITHDRAW_AMOUNT"],
            amount_com,
            message.from_user.id,
            date_time_now,
            loop
        )
    await message.answer(
        "–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ "
        "–æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º–≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –≤–∞–º –ø—Ä–∏–¥—É—Ç –¥–µ–Ω—å–≥–∏ –Ω–∞ "
        "–≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã",
        reply_markup=inline_keybords.profile_markup()
    )

    await db.remove_gift_money(message.from_user.id, data_requests["WITHDRAW_AMOUNT"], loop) #TODO
    await state.reset_state(with_data=False)

#------------------------------------------------Admin------------------------------------------------------------------------------


@dp.message_handler(commands="type")
async def change_type(message: types.Message):
    print(message.from_user.id)
    print(config.ADMINS[0])
    print(message.from_user.id in config.ADMINS)
    if message.from_user.id in config.ADMINS:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É", reply_markup=inline_keybords.get_admi_crypt_type())
        await ChangeCryptTypeFSN.TYPE.set()


@dp.message_handler(state=ChangeCryptTypeFSN.TYPE)
async def change_type_res(message: types.Message, state: FSMContext):
    if message.from_user.id in config.ADMINS:
        config.TYPE_CRIPT = message.text

        await message.answer(
            "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
            reply_markup=inline_keybords.profile_markup()
        )

        await state.reset_state(with_data=False)


@dp.message_handler()
async def change_type_res(message: types.Message):
    print(message.text + " " + str(message.from_user.id))


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    #asyncio.run_coroutine_threadsafe(worker(bot, loop), loop)
    #asyncio.run_coroutine_threadsafe(worker_percent(bot, loop), loop)
    #asyncio.run_coroutine_threadsafe(worker_clones(bot, loop), loop)
    #asyncio.run_coroutine_threadsafe(worker_jumps(bot, loop), loop)
    loops = [asyncio.new_event_loop() for i in range(0, 4)]

    thread = threading.Thread(target=loops[0].run_forever)
    thread.start()
    asyncio.run_coroutine_threadsafe(worker(loops[0]), loops[0])

    thread = threading.Thread(target=loops[1].run_forever)
    thread.start()
    asyncio.run_coroutine_threadsafe(worker_percent(loops[1]), loops[1])

    thread = threading.Thread(target=loops[2].run_forever)
    thread.start()
    asyncio.run_coroutine_threadsafe(worker_clones(loops[2]), loops[2])

    thread = threading.Thread(target=loops[3].run_forever)
    thread.start()
    asyncio.run_coroutine_threadsafe(worker_jumps(loops[3]), loops[3])

    executor.start_polling(dp, skip_updates=True)