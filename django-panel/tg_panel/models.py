import random
from datetime import datetime
from string import ascii_lowercase
from django.core.exceptions import ValidationError

from django.db import models
from django.db.models import signals
from django.dispatch import receiver


class Clones(models.Model):
    active = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'clones'


STATUS_CHOICES = (
    ('CANCELED', '‚õîÔ∏è –û—Ç–º–µ–Ω–µ–Ω'),
    ('WAIT_PAYMENT', '‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã'),
    ('OPERATION_COMPLETED', '‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∞'),
)

WITHDRAWAL_TYPES = (
    ('bank', 'üí≥ –†—É–±–ª–∏ –Ω–∞ –∫–∞—Ä—Ç—É'),
    ('crypt', 'ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞'),
)

BOOLCHOISES = (
    (False, '–ù–µ –∞–∫—Ç–∏–≤'),
    (True, '–ê–∫—Ç–∏–≤'),
)


class CryptPay(models.Model):
    amount = models.DecimalField(verbose_name='–°—É–º–º–∞', max_digits=10, decimal_places=2, blank=True, null=True)
    user_id = models.TextField(verbose_name='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', blank=True, null=True)
    date = models.DateField(verbose_name='–î–∞—Ç–∞', blank=True, null=True)
    pay_type = models.TextField(verbose_name='–¢–∏–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', blank=True, null=True)
    cancel_id = models.TextField(verbose_name='ID –æ—Ç–º–µ–Ω—ã', blank=True, null=True)
    status = models.TextField(verbose_name='–°—Ç–∞—Ç—É—Å', choices=STATUS_CHOICES, default='FALSE')
    amount_rub = models.DecimalField(verbose_name='–°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö', max_digits=10, decimal_places=2, blank=True, null=True)
    in_advance = models.BooleanField(verbose_name='–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞', default=False)


    class Meta:
        verbose_name = '–ö—Ä–∏–ø—Ç–æ-–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ'
        verbose_name_plural = '–ö—Ä–∏–ø—Ç–æ-–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è'
        managed = False
        db_table = 'crypt_pay'


class Helper(models.Model):
    from_id = models.IntegerField()
    to_id = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'helper'


class Pay(models.Model):
    pay_id = models.IntegerField(verbose_name='ID (—É –Ω–∞—Å –∏ –≤ –æ–±–º–µ–Ω–Ω–∏–∫–µ)')
    pay_amount = models.IntegerField(verbose_name='–°—É–º–º–∞')
    date = models.DateField(verbose_name='–î–∞—Ç–∞')
    pay_type = models.TextField(verbose_name='–¢–∏–ø')
    user_id = models.TextField(verbose_name='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    cancel_id = models.IntegerField(verbose_name='ID –æ—Ç–º–µ–Ω—ã')
    status = models.TextField(verbose_name='–°—Ç–∞—Ç—É—Å', choices=STATUS_CHOICES, default='FALSE')
    in_advance = models.BooleanField(verbose_name='–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞', default=False)
    
    class Meta:
        verbose_name = '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ'
        verbose_name_plural = '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è'
        managed = False
        db_table = 'pay'


class Transaction(models.Model):
    amount = models.DecimalField(verbose_name='–°—É–º–º–∞', max_digits=10, decimal_places=2, blank=True, null=True)
    currency = models.TextField(verbose_name='–í–∞–ª—é—Ç–∞', blank=True, null=True)
    date = models.DateField(verbose_name='–î–∞—Ç–∞', blank=True, null=True)
    wallet = models.TextField(verbose_name='–ö–æ—à–µ–ª–µ–∫', blank=True, null=True)
    status = models.TextField(verbose_name='–°—Ç–∞—Ç—É—Å', blank=True, null=True)

    class Meta:
        verbose_name = '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è'
        verbose_name_plural = '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
        managed = False
        db_table = 'transactions'


class TgUser(models.Model):
    user_id = models.TextField(verbose_name='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', unique=True)
    referrer_id = models.TextField(verbose_name='ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞', blank=True, null=True)
    name = models.TextField(verbose_name='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    date = models.DateField(verbose_name='–î–∞—Ç–∞', blank=True, null=True)
    money = models.IntegerField(verbose_name='–ö–æ—à–µ–ª–µ–∫', blank=True, null=True)
    date_now = models.DateTimeField(verbose_name='–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è', blank=True, null=True)
    link_name = models.TextField(verbose_name='–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', blank=True, null=True)
    depozit = models.IntegerField(verbose_name='–î–µ–ø–æ–∑–∏—Ç', blank=True, null=True)
    gift_value = models.IntegerField(blank=True, null=True)
    now_depozit = models.IntegerField(verbose_name='–¢–µ–∫—É—â–∏–π –¥–µ–ø–æ–∑–∏—Ç', blank=True, null=True)
    planet = models.TextField(verbose_name='–ü–ª–∞–Ω–µ—Ç–∞', blank=True, null=True)
    step = models.TextField(verbose_name='–£—Ä–æ–≤–µ–Ω—å', blank=True, null=True)
    first_dep = models.BooleanField(verbose_name='–ü–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')
    status = models.BooleanField(verbose_name='–°—Ç–∞—Ç—É—Å', blank=True, null=True, choices=BOOLCHOISES, default=False)
    count_ref = models.IntegerField(verbose_name='–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', blank=True, null=True)
    active = models.BooleanField(verbose_name='–ê–∫—Ç–∏–≤', blank=True, null=True, choices=BOOLCHOISES, default=False)
    gift_money = models.IntegerField(verbose_name='–î–µ–Ω—å–≥–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞', blank=True, null=True)
    amount_gift_money = models.IntegerField(verbose_name='–î–µ–Ω—å–≥–∏ —Å —Å–∏—Å—Ç–µ–º—ã –¥–∞—Ä–µ–Ω–∏—è', blank=True, null=True)
    ref_money = models.IntegerField(verbose_name='–î–µ–Ω—å–≥–∏ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', blank=True, null=True)
    jump = models.BooleanField(blank=True, null=True)
    last_withd = models.DateTimeField(blank=True, null=True, auto_now=False, auto_now_add=False)
    activate_ref_count = models.IntegerField(verbose_name='–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã', blank=True, null=True)
    remove_dep = models.IntegerField(verbose_name='–î–µ–ø–æ–∑–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–ª—è –≤—ã–≤–æ–¥–∞', blank=True, null=True, editable=False)
    percent_ref_money = models.FloatField(verbose_name='–ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', blank=True, null=True, editable=False)
    gift_money_invest = models.FloatField(verbose_name='–î–µ–Ω—å–≥–∏ –Ω–∞ –≤—ã–≤–æ–¥ —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π', blank=True, null=True, editable=False)
    reinvest = models.FloatField(verbose_name='–†–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–∏—Å—Ç–µ–º—ã –¥–∞—Ä–µ–Ω–∏—è', blank=True, null=True, editable=False)
    archive_dep = models.FloatField(verbose_name='–ê—Ä—Ö–∏–≤ —Å —Å–∏—Å—Ç–µ–º—ã –¥–∞—Ä–µ–Ω–∏—è', blank=True, null=True)
    last_month_active = models.IntegerField(blank=True, null=True)
    last_month_ref_count = models.IntegerField(verbose_name='–†–µ—Ñ–µ—Ä–∞–ª—ã —Å –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞', blank=True, null=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        verbose_name_plural = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'
        managed = False
        db_table = 'users'


WIDTHDRAW_CHOISES = (
    ('CANCEL', '‚õîÔ∏è –û—Ç–º–µ–Ω–µ–Ω'),
    ('WAIT', '‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã'),
    ('GOOD', '‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∞'),
)


class Withdraw(models.Model):
    card = models.TextField(verbose_name='–†–µ–∫–≤–∏–∑–∏—Ç—ã', )
    type = models.TextField(verbose_name='–¢–∏–ø', choices=WITHDRAWAL_TYPES)
    amount = models.IntegerField(verbose_name='–°—É–º–º–∞', )
    data = models.TextField(verbose_name='–î–æ–ø. –¥–∞–Ω–Ω—ã–µ', )
    user_id = models.TextField(verbose_name='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', )
    date = models.DateTimeField(verbose_name='–î–∞—Ç–∞', )
    status = models.CharField(verbose_name='–°—Ç–∞—Ç—É—Å', max_length=45, choices=WIDTHDRAW_CHOISES, default='WAIT')
    amount_commission = models.DecimalField(verbose_name='–°—É–º–º–∞ —Å –∫–æ–º–∏—Å—Å–∏–µ–π', max_digits=10, decimal_places=2, blank=True, null=True)
    amount_crypt = models.FloatField(verbose_name='–°—É–º–º–∞ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ', blank=True, null=True)
    type_crypt = models.CharField(verbose_name='–¢–∏–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', max_length=10, blank=True, null=True)

    class Meta:
        verbose_name = '–í—ã–≤–æ–¥'
        verbose_name_plural = '–í—ã–≤–æ–¥—ã'
        managed = False
        db_table = 'withdraw'


class ApiTokens(models.Model):
    title = models.CharField(verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ', max_length=100, unique=True)
    api = models.CharField(verbose_name='–¢–æ–∫–µ–Ω', max_length=300)

    class Meta:
        managed = False
        verbose_name = '–¢–æ–∫–µ–Ω'
        verbose_name_plural = '–¢–æ–∫–µ–Ω—ã'
        db_table = 'tokens'


class Statistic(TgUser):
    class Meta:
        proxy = True
        managed = False
        db_table = 'users'
        verbose_name = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
        verbose_name_plural = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'


class AllStats(TgUser):
    class Meta:
        proxy = True
        verbose_name = '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
        verbose_name_plural = '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'


class RefMoney(models.Model):
    user_id = models.TextField(verbose_name='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', )
    ref_id = models.TextField(verbose_name='ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞', )
    money = models.DecimalField(verbose_name='–°—É–º–º–∞', max_digits=10, decimal_places=2)
    date = models.DateTimeField(verbose_name='–î–∞—Ç–∞', )
    class Meta:
        managed = False
        db_table = 'ref_money'


class Photo(models.ImageField):
    max_size_mb = 20

    def __init__(self, *args, **kwargs):
        kwargs['upload_to'] = self.get_path
        kwargs['validators'] = [self.validate_image]

        return super().__init__(*args, **kwargs)

    def get_path(self, instance, filename, length=10):
        file_format = filename.split('.')[-1].lower()

        filename = ''
        for index in range(length):
            filename += random.choice(ascii_lowercase)

        return f'{filename}.{file_format}'

    def validate_image(self, image):
        image_size_bytes = image.file.size
        max_size_bytes = self.max_size_mb * 1024 * 1024

        if image_size_bytes > max_size_bytes:
            raise ValidationError(f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - {self.max_size_mb} –ú–ë')


class Post(models.Model):
    created = models.DateTimeField('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è, UTC',
        auto_now_add=True
    )
    status = models.CharField('–°—Ç–∞—Ç—É—Å',
        max_length=9,
        choices=[
            ('created', '–°–æ–∑–¥–∞–Ω'),
            ('postponed', '–û—Ç–ª–æ–∂–µ–Ω'),
            ('queue', '–í –æ—á–µ—Ä–µ–¥–∏'),
            ('process', '–†–∞—Å—Å—ã–ª–∞–µ—Ç—Å—è'),
            ('done', '–†–∞–∑–æ—Å–ª–∞–Ω')
        ],
        default='created'
    )

    photo = Photo('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ 5–ú–ë',
        blank=True, null=True
    )

    video = models.FileField('–í–∏–¥–µ–æ', blank=True, null=True)

    message = models.TextField('–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤',
        max_length=1024
    )
    button_text = models.CharField('–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏',
        max_length=50, blank=True, null=True
    )
    button_url = models.URLField('–°—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∏',
        blank=True, null=True
    )

    postpone = models.BooleanField('–û—Ç–ª–æ–∂–∏—Ç—å',
        default=False
    )
    postpone_time = models.DateTimeField('–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, UTC',
        default=datetime(2020, 1, 1)
    )

    def save(self, *args, **kwargs):
        if self._state.adding:
            if self.postpone:
                self.status = 'postponed'
            else:
                self.status = 'queue'

        elif self.status == 'postponed' and not self.postpone:
            self.status = 'queue'

        if not self.button_text or not self.button_url:
            self.button_text = None
            self.button_url = None

        super().save(*args, **kwargs)

    amount_of_receivers = models.IntegerField('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π',
        blank=True, null=True
    )

    def __str__(self):
        time_isoformat = self.created.isoformat(sep=' ', timespec='seconds')
        time_isoformat = time_isoformat[:time_isoformat.index('+')]

        return time_isoformat

    class Meta:
        verbose_name = '—Ä–∞—Å—Å—ã–ª–∫–∞'
        verbose_name_plural = '—Ä–∞—Å—Å—ã–ª–∫–∏'
        managed = False
        db_table = 'posts'


class AdvancePay(models.Model):
    user_id = models.TextField(verbose_name='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    date = models.DateTimeField(verbose_name='–î–∞—Ç–∞')

    class Meta:
        verbose_name = '–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞'
        verbose_name_plural = '–ü—Ä–µ–¥–æ–ø–ª–∞—Ç—ã'
        managed = False
        db_table = 'advance_pay'
