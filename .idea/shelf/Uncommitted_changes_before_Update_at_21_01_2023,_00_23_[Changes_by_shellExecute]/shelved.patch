Index: Scripts/db.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import asyncio\n\nimport aiomysql\nfrom pymysql import connect\nfrom datetime import datetime\nfrom config import Config\nfrom config import HOST, USERS, DB_NAME, PASSWORD\n\n\nasync def async_connect_to_mysql(loop):\n    connection = await aiomysql.connect(\n        host=HOST,\n        user=USERS,\n        db=DB_NAME,\n        password=PASSWORD,\n        loop=loop\n    )\n    cursor = await connection.cursor()\n\n    return connection, cursor\n\n\ndef create_sync_con():\n    con = connect(host=HOST, user=USERS, db=DB_NAME, password=PASSWORD)\n    cur = con.cursor()\n\n    return con, cur\n\n\ndef get_tokens(title):\n    connection, cursor = create_sync_con()\n    cursor.execute(\"select `title` from `tokens` where `api` = %s \", (title))\n    result = cursor.fetchall()[0][0]\n    return result\n\n\nclass ConfigDBManager:\n    @staticmethod\n    def get_all_users():\n        connection, cursor = create_sync_con()\n        cursor.execute('select `user_id` from `users`')\n        result = cursor.fetchall()\n        return result\n\n    @staticmethod\n    def reset_data(user_id):\n        connection, cursor = create_sync_con()\n        cursor.execute(\"update `users` set `planet` = 0 and `step` = 0 and `status` = 0 where user_id = %s\",\n                       (user_id,))\n        connection.commit()\n\n    @staticmethod\n    def get():\n        connection, cursor = create_sync_con()\n        data = ['bot_api', 'api_pay', 'api_coinbase_pay', 'api_coinbase_secret', 'ltc_id', 'btc_id',\n                'eth_id', 'usdt_wallet', 'type_crypt', 'errors_token', 'errors_group_id']\n\n        result = []\n        for item in data:\n            cursor.execute(\"select `title` from `tokens` where `api` = %s\", (item,))\n            result.append(cursor.fetchone()[0])\n\n        return Config(result[0], result[1], result[2], result[3], result[4], result[5], result[6], result[7],\n                      result[8], result[9], result[10])\n\n\nclass ManagerUsersDataBase:\n    async def invested_users_count(self, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT count(*) FROM users where status = 1 or planet = '1'\")\n            result = (await cursor.fetchone())[0]\n            return result\n\n    async def is_first_user_topup(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT * FROM users WHERE user_id = %s\", (user_id,))\n            result = await cursor.fetchall()\n            user = result[0]\n            return not (int(user[8]) != 0 or int(user[11]) != 0 or int(user[14]) != 0)\n\n    async def exists_user(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT * FROM users WHERE user_id = %s\", (user_id,))\n            result = await cursor.fetchall()\n            return bool(len(result))\n\n    async def get_users(self, loop, extended: bool = False):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            if extended is True:\n                await cursor.execute(\"SELECT * FROM `users`\")\n            else:\n                await cursor.execute(\"SELECT `user_id` FROM `users`\")\n            result = await cursor.fetchall()\n            return result\n\n    async def add_user(self, loop, name, user_id, date, date_now, user_name, last_withd, code, referrer_id=None):\n        connection, cursor = await async_connect_to_mysql(loop)\n\n        async with connection.cursor() as cursor:\n            if referrer_id is not None:\n                await cursor.execute(\"INSERT INTO `users` (`name`, `user_id`, `date`, `referrer_id`, `date_now`, \"\n                                     \"`link_name`, last_withd, `code`) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)\",\n                                     (name, user_id, date, referrer_id, date_now, user_name, last_withd, code))\n                await connection.commit()\n            else:\n                await cursor.execute(\"INSERT INTO `users` (`name`, `user_id`, `date`, `date_now`, `link_name`, \"\n                                     \"`last_withd`, `code`) VALUES (%s, %s, %s, %s, %s, %s, %s)\",\n                                     (name, user_id, date, date_now, user_name, last_withd, code))\n                await connection.commit()\n\n    async def count_referrer(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT * FROM `users` WHERE referrer_id = %s\", (user_id,))\n            result = await cursor.fetchall()\n            return len(result)\n\n    async def get_date(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `date` FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = (await cursor.fetchone())[0]\n            return result\n\n    async def get_date_now(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `date_now` FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def get_money(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `money` FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = str((await cursor.fetchall())[0][0])\n            return result\n\n    async def add_money_and_pecr_ref_money(self, ref_id, dep, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `money` = `money` + %s WHERE `user_id` = %s\", (dep, ref_id,))\n            await cursor.execute(\n                \"UPDATE `users` SET `percent_ref_money` = `percent_ref_money` + %s WHERE `user_id` = %s\",\n                (dep, ref_id,))\n\n            await connection.commit()\n\n    async def activate_date(self, user_id, date, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `activate_date` = %s WHERE user_id = %s\", (date, user_id,))\n            await connection.commit()\n\n    async def reset_activate_date(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `activate_date` = NULL WHERE user_id = %s\", (user_id,))\n            await connection.commit()\n\n    async def add_gift_space_money(self, user_id, money, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET money = money + %s WHERE user_id = %s\", (money, user_id,))\n            await cursor.execute(\n                \"UPDATE `users` SET `amount_gift_money` =  `amount_gift_money` + %s WHERE `user_id` = %s\",\n                (money, user_id,))\n            await cursor.execute(\"UPDATE `users` SET `now_depozit` = 0 WHERE user_id = %s\", (user_id,))\n\n            await connection.commit()\n\n    async def add_money_ref(self, user_id, ref_id, money, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET money = money + %s WHERE user_id = %s\", (money, ref_id,))\n            await cursor.execute(\"update `users` set `refgift` = 1 where user_id = %s\",\n                                 (user_id,))\n            await cursor.execute(\n                \"UPDATE `users` SET `activate_ref_count` = `activate_ref_count` + 1 WHERE `user_id` = %s\", (ref_id,))\n            await connection.commit()\n\n    async def reset_now_dep_for_new_planet(self, user_id, money, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\n                \"UPDATE `users` SET `amount_gift_money` =  `amount_gift_money` + %s WHERE `user_id` = %s\",\n                (money, user_id,))\n            await cursor.execute(\"UPDATE `users` SET `now_depozit` = now_depozit - %s WHERE `user_id` = %s\",\n                                 (money, user_id,))\n            await connection.commit()\n\n    async def update_new_step(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `step` = 1 WHERE user_id = %s\", (user_id,))\n            await cursor.execute(\"UPDATE `users` SET `status` = 0 WHERE `user_id` = %s\", (user_id,))\n            await cursor.execute(\"UPDATE `users` SET `planet` = `planet` + 1 WHERE `user_id` = %s\", (user_id,))\n\n            await connection.commit()\n\n    async def set_now_depozit_for_step(self, user_id, money, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `now_depozit` =  0 WHERE user_id = %s\", (user_id,))\n            await cursor.execute(\"UPDATE `users` SET `now_depozit` =  %s WHERE user_id = %s\", (money, user_id,))\n            await connection.commit()\n\n    async def gift(self, user_id, money1, money2, money3, money4, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute('UPDATE `users` SET `amount_gift_money` = `amount_gift_money` - %s '\n                                 'WHERE `user_id` = %s', (money4, user_id,))\n            await cursor.execute(\"UPDATE `users` SET money = money + %s WHERE user_id = %s\", (money1, user_id,))\n            await cursor.execute(\"UPDATE `users` SET `gift_money` =  `gift_money` + %s WHERE `user_id` = %s\",\n                                 (money2, user_id,))\n            await cursor.execute(\n                \"UPDATE `users` SET `amount_gift_money` =  `amount_gift_money` + %s WHERE `user_id` = %s\",\n                (money3, user_id,))\n            await cursor.execute(\"UPDATE `users` SET `first_dep` = %s WHERE `user_id` = %s\", (0, user_id,))\n            await connection.commit()\n\n    async def add_money(self, user_id, money, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET money = money + %s WHERE user_id = %s\", (money, user_id,))\n            await connection.commit()\n\n    async def add_depozit(self, user_id, money, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET depozit = depozit + %s WHERE user_id = %s\", (money, user_id,))\n            await connection.commit()\n\n    async def add_money_with_user_name(self, name, money, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET money = money + %s WHERE `name` = %s\", (money, name,))\n            await connection.commit()\n\n    async def remove_money(self, user_id, money, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET money = money - %s WHERE user_id = %s\", (money, user_id,))\n            await connection.commit()\n\n    async def add_procent(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            money = round(float(await self.get_money(user_id, loop)) * 1.005)\n            await cursor.execute(\"UPDATE `users` SET money = %s WHERE user_id = %s\", (money, user_id,))\n            await connection.commit()\n\n    async def set_new_date(self, user_id, date: datetime, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET date_now = %s WHERE user_id = %s\", (date, user_id,))\n            await connection.commit()\n\n    async def get_referrer_of_user(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `referrer_id` FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def get_ref(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `referrer_id` FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = await cursor.fetchone()\n            return result[0]\n\n    async def set_gift_id(self, from_id, to_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"INSERT INTO `helper` (`from_id`, `to_id`) VALUES (%s, %s)\",\n                                 (from_id, to_id))\n            await connection.commit()\n\n    async def get_gift_id(self, to_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `from_id` FROM `helper` WHERE `to_id` = %s\", (to_id,))\n            result = await cursor.fetchall()\n            return result\n\n    async def get_count_ref_wallet(self, ref, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `user_id` FROM `users` WHERE `referrer_id` = %s \"\n                                 \"AND `refgift` = 1\", (ref,))\n            result = await cursor.fetchall()\n            return len(result)\n\n    async def delete_gift(self, from_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"DELETE FROM `helper` WHERE `from_id` = %s\", (from_id,))\n            await connection.commit()\n\n    async def get_full_users_name(self, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `name` FROM `users`\")\n            result = await cursor.fetchall()\n            return result\n\n    async def change_status(self, user_id, value, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `status` = %s WHERE `user_id` = %s\", (value, user_id,))\n            await connection.commit()\n\n    async def get_id(self, name, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `user_id` FROM `users` WHERE `name` = %s\", (name,))\n            result = (await cursor.fetchall())[0][0]\n            return int(result)\n\n    async def get_user_name(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `link_name` FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def get_full_data(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT * FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = await cursor.fetchall()\n            return result\n\n    async def get_size_gift(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `gift_value` FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def get_deposit(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `depozit` FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def get_now_depozit(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `now_depozit` FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def get_gift(self, gift_id, user_id, money, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\n                \"UPDATE `users` SET `amount_gift_money` =  `amount_gift_money` + %s WHERE `user_id` = %s\",\n                (money, gift_id,))\n            await cursor.execute(\"UPDATE `users` SET money = money + %s WHERE user_id = %s\", (money, gift_id,))\n            await cursor.execute(\"UPDATE `users` SET `now_depozit` =  %s WHERE user_id = %s\", (money, user_id,))\n            await cursor.execute(\"UPDATE `users` SET money = money - %s WHERE user_id = %s\", (money, user_id,))\n\n            await connection.commit()\n\n    async def add_money_and_dep(self, user_id, money, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\n                \"UPDATE `users` SET `depozit` =  `depozit` + %s WHERE `user_id` = %s\", (money, user_id,))\n            await cursor.execute(\"UPDATE `users` SET `money` = money + %s WHERE user_id = %s\", (money, user_id,))\n            await cursor.execute(\"UPDATE `users` SET `remove_dep` = `remove_dep` + %s WHERE `user_id` = %s\",\n                                 (money, user_id))\n            await connection.commit()\n\n    async def add_now_dep(self, user_id, money, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\n                \"UPDATE `users` SET `amount_gift_money` =  `amount_gift_money` + %s WHERE `user_id` = %s\",\n                (money, user_id,))\n            await cursor.execute(\"UPDATE `users` SET `now_depozit` = 0 WHERE user_id = %s\", (user_id,))\n            await connection.commit()\n\n    async def set_now_depozit(self, user_id, money, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `now_depozit` =  %s WHERE user_id = %s\", (money, user_id,))\n            await connection.commit()\n\n    async def update_step(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `step` = `step` + %s WHERE user_id = %s\", (1, user_id,))\n            await connection.commit()\n\n    async def update_planet_clones(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `step` = 1 WHERE user_id = %s\", (user_id,))\n            await cursor.execute(\"UPDATE `users` SET `status` = %s WHERE `user_id` = %s\", (0, user_id,))\n            await cursor.execute(\"UPDATE `users` SET `active` =  0 WHERE `user_id` = %s\", (user_id,))\n            await cursor.execute(\"UPDATE `users` SET `first_dep` = %s WHERE `user_id` = %s\", (0, user_id,))\n\n            await connection.commit()\n\n    async def reset_step(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `step` = 1 WHERE user_id = %s\", (user_id,))\n            await connection.commit()\n\n    async def update_planet(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `planet` = `planet` + %s WHERE user_id = %s\", (1, user_id,))\n            await connection.commit()\n\n    async def add_gift_value(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `gift_value` = `gift_value` + 1 WHERE `user_id` = %s\", (user_id,))\n            await connection.commit()\n\n    async def get_status(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `status` FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = (await cursor.fetchall())[0]\n            return result\n\n    async def get_first_dep(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `first_dep` FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def get_planet(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `planet` FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = (await cursor.fetchall())[0]\n            return result\n\n    async def get_step(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `step` FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def get_name(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `name` FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def change_first_dep(self, user_id, value, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `first_dep` = %s WHERE `user_id` = %s\", (value, user_id,))\n            await connection.commit()\n\n    async def remove_now_depozit(self, user_id, money, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `now_depozit` = now_depozit - %s WHERE `user_id` = %s\",\n                                 (money, user_id,))\n            await connection.commit()\n\n    async def get_users_on_planet(self, planet, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT * FROM `users` WHERE `planet` = %s\", (planet,))\n            result = await cursor.fetchall()\n            return result\n\n    async def get_empty_block_users(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT * FROM `users` WHERE `block_user_id` = 0 AND `user_id` != %s\", (user_id,))\n            result = await cursor.fetchall()\n            return result\n\n    async def new_block_user(self, user_id, block_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `block_user_id` = %s WHERE `user_id` = %s\", (block_id, user_id))\n            await connection.commit()\n\n    async def update_activate_count_ref(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `activate_ref_count` = `activate_ref_count` + 1 WHERE `user_id` = %s\", (user_id,))\n            await connection.commit()\n\n    async def get_activate_count_ref(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `activate_ref_count` FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def update_count_ref(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `count_ref` = `count_ref` + 1 WHERE `user_id` = %s\", (user_id,))\n            await connection.commit()\n\n    async def update_active(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `active` =  1 WHERE `user_id` = %s\", (user_id,))\n            await connection.commit()\n\n    async def reset_active(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `active` =  0 WHERE `user_id` = %s\", (user_id,))\n            await connection.commit()\n\n    async def add_gift_money(self, user_id, money, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `gift_money` =  `gift_money` + %s WHERE `user_id` = %s\",\n                                 (money, user_id,))\n            await connection.commit()\n\n    async def remove_gift_money(self, user_id, money, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `gift_money` =  `gift_money` - %s WHERE `user_id` = %s\",\n                                 (money, user_id,))\n            await connection.commit()\n\n    async def get_gift_money(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `gift_money` FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def add_amount_gift_money(self, user_id, money, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\n                \"UPDATE `users` SET `amount_gift_money` =  `amount_gift_money` + %s WHERE `user_id` = %s\",\n                (money, user_id,))\n            await connection.commit()\n\n    async def remove_amount_gift_money(self, user_id, money, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\n                \"UPDATE `users` SET `amount_gift_money` =  `amount_gift_money` - %s WHERE `user_id` = %s\",\n                (money, user_id,))\n            await connection.commit()\n\n    async def add_remove_dep(self, user_id, money, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\n                \"UPDATE `users` SET `remove_dep` = `remove_dep` + %s WHERE `user_id` = %s\",\n                (money, user_id,))\n            await connection.commit()\n\n    async def get_ref_money(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `ref_money` FROM `users` WHERE `user_id` = %s\",\n                                 (user_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def add_ref_money(self, user_id, money, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `ref_money` =  `ref_money` + %s WHERE `user_id` = %s\",\n                                 (money, user_id,))\n            await connection.commit()\n\n    async def get_amount_gift_money(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `amount_gift_money` FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def get_active(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `active` FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def get_users_of_block(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `link_name` FROM `users` WHERE `block_user_id` = %s\", (user_id,))\n            result = await cursor.fetchall()\n            return result\n\n    async def get_count_ref(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `count_ref` FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def get_count_active_ref(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `activate_ref_count` FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def delete_acc(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"DELETE FROM `users` WHERE `user_id` = %s\", (user_id,))\n            await connection.commit()\n\n    async def have_jump(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `jump` FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def reset_jump(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `jump` = 0 WHERE `user_id` = %s\", (user_id,))\n            await connection.commit()\n\n    async def get_ref_users(self, ref_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT * FROM `users` WHERE `referrer_id` = %s\", (ref_id,))\n            result = await cursor.fetchall()\n            return result\n\n    async def get_ref_users_in(self, ref_users, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            placeholders = ', '.join(['%s'] * len(ref_users))\n            query = \"SELECT user_id, depozit, status, planet FROM users WHERE `referrer_id` in ({})\".format(placeholders)\n            await cursor.execute(query, tuple(ref_users))\n            result = await cursor.fetchall()\n            return result\n\n    async def ref_count(self, ref_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT COUNT(*) FROM `users` WHERE `referrer_id` = %s\", (ref_id,))\n\n    async def get_last_withd(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `last_withd` FROM `users` WHERE `user_id` = %s\", (user_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def set_last_withd(self, user_id, date, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `last_withd` = %s WHERE `user_id` = %s\", (date, user_id,))\n            await connection.commit()\n\n    async def insert_ref_money(self, money, ref_id, user_id, date, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"insert into `ref_money` (`user_id`, `ref_id`, `money`, `date`) \"\n                                 \"values (%s, %s, %s, %s)\", (user_id, ref_id, money, date,))\n            await connection.commit()\n\n    async def remove_depozit(self, money, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `users` SET `depozit` = `depozit` - %s WHERE `user_id` = %s\",\n                                 (money, user_id,))\n            await connection.commit()\n\n    async def get_percent_ref_money(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"select `percent_ref_money` from users where user_id = %s\",\n                                 (user_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def set_percent_ref_money(self, user_id, money, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"update `users` set `percent_ref_money` = `percent_ref_money` + %s where user_id = %s\",\n                                 (money, user_id,))\n            await connection.commit()\n\n    async def get_reinvest(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"select `reinvest` from users where user_id = %s\",\n                                 (user_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def add_reinvest(self, user_id, money, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"update `users` set `reinvest` = `reinvest` + %s where user_id = %s\",\n                                 (money, user_id,))\n            await connection.commit()\n\n    async def remove_reinvest(self, user_id, money, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"update `users` set `reinvest` = `reinvest` - %s where user_id = %s\",\n                                 (money, user_id,))\n            await connection.commit()\n\n    async def reset_data(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"update `users` set `planet` = 0 and `step` = 0 and `status` = 0 where user_id = %s\",\n                                 (user_id,))\n            await connection.commit()\n\n    async def get_refgift(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"select `refgift` from users where user_id = %s\",\n                                 (user_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def reset_refgift(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"update `users` set `refgift` = 1 where user_id = %s\",\n                                 (user_id,))\n            await connection.commit()\n\n\nclass ManagerPayDataBase:\n    async def get_total_topup_users(self, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute('''\n                SELECT COUNT(DISTINCT(user_id)) FROM (\n                    SELECT user_id FROM yougiftdb.crypt_pay where status='OPERATION_COMPLETED'\n                    UNION\n                    SELECT user_id FROM yougiftdb.pay where status='OPERATION_COMPLETED'\n                ) t;\n            ''')\n            result = (await cursor.fetchone())[0]\n            return result\n\n    async def get_user_topups(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute('''\n                SELECT COUNT(*) FROM (\n                    SELECT user_id FROM yougiftdb.crypt_pay where status='OPERATION_COMPLETED' and user_id=%s \n                    UNION\n                    SELECT user_id FROM yougiftdb.pay where status='OPERATION_COMPLETED' and user_id=%s\n                ) t;\n            ''', (user_id, user_id))\n            result = (await cursor.fetchone())[0]\n            return result\n\n    async def get_total_topup_sum(self, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\n                \"SELECT SUM(`pay_amount`) FROM `pay` where `status`='OPERATION_COMPLETED'\")\n            result = (await cursor.fetchone())[0]\n            return result\n\n    async def get_total_topup_sum_crypt(self, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\n                \"SELECT SUM(`amount_rub`) FROM `crypt_pay` where `status`='OPERATION_COMPLETED'\")\n            result = (await cursor.fetchone())[0]\n            return result\n\n    async def create_pay(self, pay_id, pay_type, pay_amount, date, user_id, canc_id, status, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"INSERT INTO `pay` (`pay_id`, `pay_amount`, `date`,  `pay_type`, `user_id`, \"\n                                 \"`cancel_id`, `status`) VALUES (%s, %s, %s, %s, %s, %s, %s)\",\n                                 (pay_id, pay_amount, date, pay_type, user_id, canc_id, status))\n            await connection.commit()\n\n    async def get_data(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT * FROM `pay` WHERE `user_id` = %s\", (user_id,))\n            result = await cursor.fetchall()\n            return result\n\n    async def get_data_canc(self, canc_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT * FROM `pay` WHERE `cancel_id` = %s\", (canc_id,))\n            result = await cursor.fetchall()\n            return result\n\n    async def cancel_request(self, canc_id, type, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            if type == \"CREDIT\":\n                await cursor.execute(\"DELETE FROM `pay` WHERE `cancel_id` = %s\", (canc_id,))\n                await connection.commit()\n            else:\n                await cursor.execute(\"DELETE FROM `crypt_pay` WHERE `cancel_id` = %s\", (canc_id,))\n                await connection.commit()\n\n    async def get_users(self, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `user_id` FROM `pay`\")\n            result = await cursor.fetchall()\n            return result\n\n    async def create_crypt_pay(self, pay_type, pay_amount, date, user_id, canc_id, status, amount_rub, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"INSERT INTO `crypt_pay` (`amount`, `date`,  `pay_type`, `user_id`, `cancel_id`,\"\n                                 \" `status`, `amount_rub`) \"\n                                 \"VALUES (%s, %s, %s, %s, %s, %s, %s)\",\n                                 (pay_amount, date, pay_type, user_id, canc_id, status, amount_rub))\n            await connection.commit()\n\n    async def get_status(self, canc_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `status` FROM `crypt_pay` WHERE `cancel_id` = %s\", (canc_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def get_status_credit(self, canc_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `status` FROM `pay` WHERE `cancel_id` = %s\", (canc_id,))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def get_data_crypt(self, canc_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT * FROM `crypt_pay` WHERE `cancel_id` = %s\", (canc_id,))\n            result = await cursor.fetchall()\n            return result\n\n    async def get_all_data_crypt(self, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT * FROM `crypt_pay`\")\n            result = await cursor.fetchall()\n            return result\n\n    async def change_status(self, status, user_id, type, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            if type == \"CREDIT\":\n                await cursor.execute(\"UPDATE `pay` SET `status` = %s WHERE `user_id` = %s\",\n                                     (status, user_id,))\n                await connection.commit()\n            else:\n                await cursor.execute(\"UPDATE `crypt_pay` SET `status` = %s WHERE `user_id` = %s\",\n                                     (status, user_id,))\n                await connection.commit()\n\n    async def change_status_for_cancel(self, status, cancel, type, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            if type == \"CREDIT\":\n                await cursor.execute(\"UPDATE `pay` SET `status` = %s WHERE `cancel_id` = %s\", (status, cancel,))\n                await connection.commit()\n            else:\n                await cursor.execute(\"UPDATE `crypt_pay` SET `status` = %s WHERE `cancel_id` = %s\", (status, cancel,))\n                await connection.commit()\n\n    async def get_count_crypt(self, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT COUNT(*) FROM `crypt_pay`\")\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def get_count_credit(self, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT COUNT(*) FROM `pay`\")\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def get_amount_rub_crypt(self, cancel_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT `amount_rub` FROM `crypt_pay` WHERE `cancel_id` = %s\", (cancel_id))\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def get_all_transactions(self, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT * FROM `transactions`\")\n            result = await cursor.fetchall()\n            return result\n\n    async def create_trans(self, amount, currency, date, wallet, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"INSERT INTO `transactions`(`amount`, `currency`, `date`, `wallet`, `status`) \"\n                                 \"VALUES (%s, %s, %s, %s, 'PROCESSED')\", (amount, currency, date, wallet,))\n            await connection.commit()\n\n    async def check_exist(self, amount, currency, date, wallet, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT EXISTS(SELECT id FROM `transactions` WHERE `amount` = %s AND \"\n                                 \"`currency` = %s AND `date` = %s AND `wallet` = %s)\",\n                                 (amount, currency, date, wallet,))\n            result = await cursor.fetchone()\n            return result\n\n    async def change_status_trans(self, id, status, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `transactions` SET `status` = %s WHERE `id` = %s\", (status, id))\n            await connection.commit()\n\n    async def get_reinvest(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"\")\n            result = await cursor.fetchone()\n            return result\n\n    async def set_reinvest(self, id, status, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `transactions` SET `status` = %s WHERE `id` = %s\", (status, id))\n            await connection.commit()\n\n\nclass ManagerWithDrawDataBase:\n    async def create_request_crypt(self, card, data, type, amount, amount_crypt, amount_commission, user_id, date,\n                                   type_crypt, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"INSERT INTO `withdraw` (`card`, `data`, `type`, `amount`, `amount_crypt`, \"\n                                 \"`amount_commission`,`user_id`, `date`, `status`, `type_crypt`) VALUES (%s, %s, %s, %s, \"\n                                 \"%s, %s,  %s, %s, %s, %s)\", (card, data, type, amount, amount_crypt,\n                                                              amount_commission, user_id, date, 'WAIT',\n                                                              type_crypt,))\n            await connection.commit()\n\n    async def create_request_bank(self, card, data, type, amount, amount_commission, user_id, date, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\n                \"INSERT INTO `withdraw` (`card`, `data`, `type`, `amount`, `amount_commission`, `user_id`, `date`, `status`) VALUES (%s, %s, %s, %s, \"\n                \"%s, %s, %s, %s)\", (card, data, type, amount, amount_commission, user_id, date, 'WAIT',))\n            await connection.commit()\n\n    async def create_request_crypt_percent(self, card, data, type, amount, amount_crypt, amount_commission, user_id,\n                                           date, type_crypt, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"INSERT INTO `withdraw_wallet` (`card`, `data`, `type`, `amount`, `amount_crypt`, \"\n                                 \"`amount_commission`,`user_id`, `date`, `status`, `type_crypt`) VALUES (%s, %s, %s, %s, \"\n                                 \"%s, %s,  %s, %s, %s, %s)\", (card, data, type, amount, amount_crypt,\n                                                              amount_commission, user_id, date, 'WAIT',\n                                                              type_crypt,))\n            await connection.commit()\n\n    async def create_request_bank_percent(self, card, data, type, amount, amount_commission, user_id, date, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\n                \"INSERT INTO `withdraw_wallet` (`card`, `data`, `type`, `amount`, `amount_commission`, `user_id`, `date`, `status`) VALUES (%s, %s, %s, %s, \"\n                \"%s, %s, %s, %s)\", (card, data, type, amount, amount_commission, user_id, date, 'WAIT',))\n            await connection.commit()\n\n    async def delete_request(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"DELETE FROM `withdraw` WHERE `user_id` = %s\", (user_id,))\n            await connection.commit()\n\n    async def get_all_request(self, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT * FROM `withdraw`\")\n\n    async def get_other_request(self, user_id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT * FROM `withdraw` WHERE `user_id` = %s\", (user_id,))\n\n\nclass ManagerClonesDataBase:\n    async def create_clone(self, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"INSERT INTO `clones` (`active`) VALUES (1)\")\n            await connection.commit()\n\n    async def get_count_clones(self, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT COUNT(*) FROM `clones`\")\n            result = (await cursor.fetchall())[0][0]\n            return result\n\n    async def get_all(self, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"SELECT * FROM `clones`\")\n            result = await cursor.fetchall()\n            return result\n\n    async def change_active(self, id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"UPDATE `clones` SET `active` = 0 WHERE `id` = %s\", (id,))\n            await connection.commit()\n\n    async def reset_clone(self, id, loop):\n        connection, cursor = await async_connect_to_mysql(loop)\n        async with connection.cursor() as cursor:\n            await cursor.execute(\"DELETE FROM `clones` WHERE `id` = %s\", (id,))\n            await connection.commit()\n\n\n# if __name__ == '__main__':\n#     loops = asyncio.new_event_loop()\n#     asyncio.run(ManagerUsersDataBase().is_first_user_topup(415321692, loops))\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Scripts/db.py b/Scripts/db.py
--- a/Scripts/db.py	(revision 0e4295fbda0e01637970ac94d8a82a0c16c4ec69)
+++ b/Scripts/db.py	(date 1674234233364)
@@ -617,6 +617,13 @@
             result = (await cursor.fetchall())[0][0]
             return result
 
+    async def get_count_ref_total(self, user_id, loop):
+        connection, cursor = await async_connect_to_mysql(loop)
+        async with connection.cursor() as cursor:
+            await cursor.execute("SELECT COUNT(*) FROM `users` WHERE `referrer_id` = %s", (user_id, ))
+            result = (await cursor.fetchall())[0]
+            return result
+
     async def get_count_active_ref(self, user_id, loop):
         connection, cursor = await async_connect_to_mysql(loop)
         async with connection.cursor() as cursor:
@@ -624,6 +631,19 @@
             result = (await cursor.fetchall())[0][0]
             return result
 
+    async def get_count_active_ref_total(self, user_id, loop):
+        connection, cursor = await async_connect_to_mysql(loop)
+        async with connection.cursor() as cursor:
+            await cursor.execute("SELECT * FROM `users` WHERE `referrer_id` = %s", (user_id,))
+            result = (await cursor.fetchall())
+
+            users_count = 0
+            for user in result:
+                if not (int(user[8]) != 0 or int(user[11]) != 0 or int(user[14]) != 0):
+                    users_count += 1
+
+            return users_count
+
     async def delete_acc(self, user_id, loop):
         connection, cursor = await async_connect_to_mysql(loop)
         async with connection.cursor() as cursor:
Index: Scripts/config.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class Config:\n    def __init__(self, api_bot, api_pay, api_coinbase_pay, api_coinbase_secret, ltc_id, btc_id, eth_id,\n                 usdt_wallet, type_cript, errors_token, errors_group_id):\n        self.api_bot = api_bot\n        self.api_pay = api_pay\n        self.API_COINBASE_PAY = api_coinbase_pay\n        self.API_COINBASE_SECRET = api_coinbase_secret\n        self.LTC_ID = ltc_id\n        self.BTC_ID = btc_id\n        self.ETH_ID = eth_id\n        self.USDT_WALLET = usdt_wallet\n        self.TYPE_CRIPT = type_cript\n        self.ERRORS_TOKEN = errors_token\n        self.errors_group_id = errors_group_id\n\n\nname_bot = \"space_gift_bot\"\n\ndomain_pay = \"orionbtc.xyz\"\n\nNUMBER_PAY = 0\nADMINS = [855151774]\n\nSUB_GROUP = -1001878641715\n\nDEBUG = False\n\nif DEBUG:\n    PATH = '/Users/kit/PycharmProjects/Space_Gift'\n\n    HOST = \"127.0.0.1\"\n    USERS = \"root\"\n    PASSWORD = \"root\"\n    DB_NAME = \"yougiftdb\"\nelse:\n    PATH = '/opt/Space_Gift'\n\n    HOST = \"127.0.0.1\"\n    USERS = \"root\"\n    PASSWORD = \"6CHWb6QmNUy9bLuX\"\n    DB_NAME = \"yougiftdb\"\n\nCOMMISSION = 0.2\nCOMMISSION_INVEST = 0.05\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Scripts/config.py b/Scripts/config.py
--- a/Scripts/config.py	(revision 0e4295fbda0e01637970ac94d8a82a0c16c4ec69)
+++ b/Scripts/config.py	(date 1674044511594)
@@ -23,7 +23,7 @@
 
 SUB_GROUP = -1001878641715
 
-DEBUG = False
+DEBUG = True
 
 if DEBUG:
     PATH = '/Users/kit/PycharmProjects/Space_Gift'
Index: django-panel/config/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\nimport pymysql\nfrom pathlib import Path\n\nfrom django.core.management.utils import get_random_secret_key\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\nSECRET_KEY = 'django-insecure-qsay6%yqmxl4ot)pi6j2t4+_b96vou@j_5yuji)jvb_tt#k3lq'\n\nDEBUG = False\n\nALLOWED_HOSTS = ['*',]\n\n\nINSTALLED_APPS = [\n    'django_admin_filters',\n    'jet.dashboard',\n    'jet',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'tg_panel',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'config.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'config.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\n\nif DEBUG:\n    DATABASES = {\n        'default': {\n            'ENGINE': 'django.db.backends.mysql',\n            'NAME': 'yougiftdb',\n            'USER': 'root',\n            'PASSWORD': 'root',\n            'HOST': 'localhost',\n            'PORT': '3306',\n            'OPTIONS': {\n                'charset': 'utf8mb4'\n            }\n        }\n    }\n    BASE_URL = 'http://127.0.0.1:8000'\nelse:\n    DATABASES = {\n        'default': {\n            'ENGINE': 'django.db.backends.mysql',\n            'NAME': 'yougiftdb',\n            'USER': 'root',\n            'PASSWORD': '6CHWb6QmNUy9bLuX',\n            'HOST': 'localhost',\n            'PORT': '3306',\n            'OPTIONS': {\n                'charset': 'utf8mb4'\n            }\n        }\n    }\n    BASE_URL = 'http://135.181.201.63'\n#pymysql.install_as_MySQLdb()\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.1/topics/i18n/\n\nLANGUAGE_CODE = 'ru'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\n\n\n#JET\nJET_THEMES = [\n    {\n        'theme': 'default', # theme folder name\n        'color': '#47bac1', # color of the theme's button in user menu\n        'title': 'Default' # theme title\n    },\n    {\n        'theme': 'green',\n        'color': '#44b78b',\n        'title': 'Green'\n    },\n    {\n        'theme': 'light-green',\n        'color': '#2faa60',\n        'title': 'Light Green'\n    },\n    {\n        'theme': 'light-violet',\n        'color': '#a464c4',\n        'title': 'Light Violet'\n    },\n    {\n        'theme': 'light-blue',\n        'color': '#5EADDE',\n        'title': 'Light Blue'\n    },\n    {\n        'theme': 'light-gray',\n        'color': '#222',\n        'title': 'Light Gray'\n    }\n]\n\nJET_SIDE_MENU_COMPACT = False\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/django-panel/config/settings.py b/django-panel/config/settings.py
--- a/django-panel/config/settings.py	(revision 0e4295fbda0e01637970ac94d8a82a0c16c4ec69)
+++ b/django-panel/config/settings.py	(date 1674129026404)
@@ -2,6 +2,9 @@
 import pymysql
 from pathlib import Path
 
+import pymysql
+pymysql.install_as_MySQLdb()
+
 from django.core.management.utils import get_random_secret_key
 
 # Build paths inside the project like this: BASE_DIR / 'subdir'.
@@ -10,7 +13,7 @@
 
 SECRET_KEY = 'django-insecure-qsay6%yqmxl4ot)pi6j2t4+_b96vou@j_5yuji)jvb_tt#k3lq'
 
-DEBUG = False
+DEBUG = True
 
 ALLOWED_HOSTS = ['*',]
 
Index: mysql/yougiftdb_users.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>-- MySQL dump 10.13  Distrib 8.0.31, for Win64 (x86_64)\n--\n-- Host: localhost    Database: yougiftdb\n-- ------------------------------------------------------\n-- Server version\t8.0.31\n\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;\n/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;\n/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;\n/*!50503 SET NAMES utf8 */;\n/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;\n/*!40103 SET TIME_ZONE='+00:00' */;\n/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;\n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;\n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;\n/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;\n\n--\n-- Table structure for table `users`\n--\n\nDROP TABLE IF EXISTS `users`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!50503 SET character_set_client = utf8mb4 */;\nCREATE TABLE `users` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `user_id` text COLLATE utf8mb4_unicode_ci,\n  `referrer_id` text COLLATE utf8mb4_unicode_ci,\n  `name` varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  `date` date DEFAULT NULL,\n  `money` decimal(10,0) DEFAULT '0',\n  `date_now` datetime DEFAULT NULL,\n  `link_name` varchar(45) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  `depozit` double DEFAULT '0',\n  `gift_value` double DEFAULT '0',\n  `now_depozit` double DEFAULT '0',\n  `planet` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT '0',\n  `step` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT '1',\n  `first_dep` tinyint DEFAULT '1',\n  `status` tinyint DEFAULT '0',\n  `count_ref` int DEFAULT '0',\n  `active` tinyint DEFAULT '0',\n  `gift_money` double DEFAULT '0',\n  `amount_gift_money` double DEFAULT '0',\n  `ref_money` double DEFAULT '0',\n  `jump` tinyint DEFAULT '0',\n  `last_withd` datetime DEFAULT NULL,\n  `code` varchar(80) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,\n  `percent_ref_money` float DEFAULT '0',\n  `reinvest` float DEFAULT '0',\n  `refgift` tinyint DEFAULT '0',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n/*!40101 SET character_set_client = @saved_cs_client */;\n\n--\n-- Dumping data for table `users`\n--\n\nLOCK TABLES `users` WRITE;\n/*!40000 ALTER TABLE `users` DISABLE KEYS */;\nINSERT INTO `users` VALUES (10,'415321692','855151774','?','2022-12-29',75000,'2022-12-29 20:17:39','teaeye',55000,0,0,'1','1',0,1,0,0,0,15000,0,0,'2022-12-29 20:17:39','676787',0,10000,1),(12,'628931867','855151774','meow','2022-12-29',15000,'2022-12-29 20:29:22','EluciferE',0,0,0,'1','1',0,0,0,0,8000,15000,0,0,'2022-12-29 20:29:22','? Реферальная ссылка',0,0,1),(23,'1328872217',NULL,'Матвей','2022-12-30',-40000,'2022-12-29 22:32:07','m_kravts',0,0,15000,'1','1',1,1,1,0,0,0,0,0,'2022-12-29 22:32:07','1234',0,0,0),(24,'1396645031','1328872217','??\u200D? Hermes оператор | Обмен BTC, EXMO, ETH, LTC ?','2022-12-30',0,'2022-12-29 22:32:24','hermes_btc_admin',0,0,15000,'1','1',0,1,0,0,10000,0,0,0,'2022-12-29 22:32:24','Про',0,0,1);\n/*!40000 ALTER TABLE `users` ENABLE KEYS */;\nUNLOCK TABLES;\n/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;\n\n/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;\n/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;\n/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;\n/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;\n/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;\n/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;\n\n-- Dump completed on 2022-12-30  1:38:45\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mysql/yougiftdb_users.sql b/mysql/yougiftdb_users.sql
--- a/mysql/yougiftdb_users.sql	(revision 0e4295fbda0e01637970ac94d8a82a0c16c4ec69)
+++ b/mysql/yougiftdb_users.sql	(date 1674234531932)
@@ -49,6 +49,8 @@
   `percent_ref_money` float DEFAULT '0',
   `reinvest` float DEFAULT '0',
   `refgift` tinyint DEFAULT '0',
+  `is_include_ref` tinyint DEFAULT '1',
+  `archive_dep` double DEFAULT '0',
   PRIMARY KEY (`id`)
 ) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
 /*!40101 SET character_set_client = @saved_cs_client */;
Index: Scripts/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import asyncio\nimport logging\nimport os\nimport threading\n\nimport pytz\nfrom aiogram import Bot, types\nfrom aiogram.dispatcher import Dispatcher\nfrom aiogram.utils import executor\nfrom aiogram.dispatcher import FSMContext\nfrom aiogram.contrib.fsm_storage.memory import MemoryStorage\n\nimport datetime\nimport PayManager\nimport config\nfrom FSM import PayFSM, CalculatorFSM, WithdrawMoneyFSM, ChangeCryptTypeFSN, AnswerAfterGiftFSM, \\\n    SendGiftFSM, PayCryptFSM, UserCodeFSM, WithdrawMoneyPercentFSM, ReinvestFSM\nfrom db import ManagerUsersDataBase, ManagerPayDataBase, ManagerWithDrawDataBase, ConfigDBManager\nimport coinbase_data\nfrom User import User, UserDB\nfrom back_work import worker\nfrom Percent import worker_percent\nfrom back_clones import worker_clones\nfrom jump import worker_jumps\nimport inline_keybords\nimport logic\nimport clones\nfrom utils import is_user_subbed, count_total_referrals_by_user\n\nloop = asyncio.new_event_loop()\nlock = asyncio.Lock()\n\nPATH = config.PATH\n\nconfigCl = ConfigDBManager.get()\n\nAPI_TOKEN = configCl.api_bot  # Считывание токена\nbot = Bot(token=API_TOKEN)\n\nNAME_BOT = config.name_bot  # Считывание имени бота\nNUMBER_PAY = config.NUMBER_PAY\n\ndp = Dispatcher(bot, storage=MemoryStorage())\n\ndb = ManagerUsersDataBase()\ndbPay = ManagerPayDataBase()\ndbWithDraw = ManagerWithDrawDataBase()\n\nmessage_handlers_commands = [\"\uD83D\uDCB3 Кошелёк\", \"\uD83D\uDE80 Взлёт\", \"\uD83D\uDD27 Инструменты\", \"\uD83D\uDCDD О проекте\", \"\uD83C\uDF11 Space Money\",\n                             \"⚙ Тех. поддержка\"]\n\n\n@dp.message_handler(commands=['start'])  # Обработка команды /start\nasync def send_welcome(message: types.Message, state: FSMContext):\n    if message.chat.type == \"private\":\n        if not await db.exists_user(message.from_user.id, loop):\n            referrer_id = message.get_args()\n            async with state.proxy() as data:\n                data['referrer_id'] = referrer_id if referrer_id else None\n                data['join_date'] = datetime.date.today()\n\n            ''' Check if user don't sub on group '''\n            if not (await is_user_subbed(bot, config.SUB_GROUP, message.from_user.id)):\n                keyboard = types.InlineKeyboardMarkup().add(\n                    types.InlineKeyboardButton(\n                        text=\"\uD83D\uDE07 Подписаться\",\n                        url='https://t.me/spacegiftbot',\n                    )\n                )\n                return await message.answer(\n                    text=\"*Чтобы пользововаться ботом*, вам нужно подписаться \"\n                         \"на нашу *официальную группу* https://t.me/spacegiftbot\\n\\n\"\n                         \"Чтобы проверить статус подписки, напишите /start\",\n                    parse_mode='markdown',\n                    reply_markup=keyboard,\n                )\n\n            with open(PATH + \"/Data/start_text.txt\", 'r', encoding='utf8') as file:\n                reply = file.read()\n            with open(PATH + \"/img/login.png\", 'rb') as file:\n                await bot.send_photo(\n                    message.from_user.id,\n                    photo=file,\n                    caption=reply,\n                    reply_markup=inline_keybords.get_start_inline(),\n                    parse_mode=\"HTML\"\n                )\n        else:\n            await message.answer(\"Добро пожаловать!\", reply_markup=inline_keybords.profile_markup())\n\n\n@dp.callback_query_handler(text=\"login\")  # Регистрирование пользователя и проверка рефералки\nasync def login_after_callback(callback: types.CallbackQuery, state: FSMContext):\n    async with state.proxy() as data:\n        referrer_id = data['referrer_id']\n\n    if referrer_id == callback.from_user.id:\n        await bot.send_message(callback.from_user.id,\n                               \"Нельзя регистрироваться по собственной реферальной ссылке!\\n\"\n                               f\"Чтобы начать регистрацию перейдите по https://t.me/{NAME_BOT}?start=855151774\")\n        return\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    await bot.send_message(callback.from_user.id,\n                           \"Пользовательское соглашение Space Gift и политика конфиденциальности\"\n                           \"\\nhttps://telegra.ph/Polzovatelskoe-soglashenie-Space-Gift-12-30\",\n                           reply_markup=inline_keybords.accept_inline())\n\n\n@dp.callback_query_handler(text=\"capcha\")  # Капча\nasync def capcha_callback(callback: types.CallbackQuery):\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    await inline_keybords.create_capcha(bot, callback.from_user.id)\n\n\n@dp.callback_query_handler(text=\"right\")  # Если капча правильная, то спрашиваем о регистрации к пользователю\nasync def sure_quest(callback: types.CallbackQuery, state: FSMContext):\n    async with state.proxy() as data:\n        referrer_id = data['referrer_id']\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    if referrer_id is not None:\n        await bot.send_message(callback.from_user.id,\n                               f\"Верно ✅\\n\\nВы регистрируетесь к участнику @{await db.get_user_name(referrer_id, loop)}\\n\\n\"\n                               f\"После регистрации смена наставника невозможна!\\n\"\n                               f\"Вы подтверждаете регистрацию?\", reply_markup=inline_keybords.sure_login())\n    else:\n        await bot.send_message(callback.from_user.id,\n                               f\"Верно ✅\\n\\nВы не регистрируетесь ни к какому участнику\\n\"\n                               f\"После регистрации изменить что либо невозможно!\\n\"\n                               f\"Вы подтверждаете регистрацию?\", reply_markup=inline_keybords.sure_login())\n\n\n@dp.callback_query_handler(text=\"no_ans\")  # Если он откажется\nasync def no_ans(callback: types.CallbackQuery):\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    await bot.send_message(callback.from_user.id, \"Для возобновления используйте команду /start\")\n\n\n@dp.callback_query_handler(text=\"yes_ans\")  # Если он согласится\nasync def yes_ans(callback: types.CallbackQuery):\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    await bot.send_message(\n        callback.from_user.id,\n        \"\uD83D\uDD10 Теперь Вам нужно придумать код-текст для восстановления \"\n        \"вашего профиля в случай потери ( лучше записать ) Придумать данный код:\uD83D\uDC47\"\n    )\n    await UserCodeFSM.code.set()\n\n\n@dp.message_handler(state=UserCodeFSM.code)\nasync def code(message: types.Message, state: FSMContext):\n    async with lock:\n        async with state.proxy() as data:\n            referrer_id = data['referrer_id']\n            join_date = data['join_date']\n        utc_now = pytz.utc.localize(datetime.datetime.utcnow())\n        date_time_now = utc_now.astimezone(pytz.timezone(\"UTC\"))\n        await db.add_user(loop, message.from_user.first_name, message.from_user.id, join_date, date_time_now,\n                          user_name=message.from_user.username, referrer_id=referrer_id,\n                          last_withd=date_time_now, code=message.text)\n\n        if referrer_id is not None:\n            await db.update_count_ref(referrer_id, loop)\n            if message.from_user.username is None:\n                nick = f\"{message.from_user.first_name} ({message.from_user.id})\"\n            else:\n                nick = f'@{message.from_user.username}'\n            await bot.send_message(\n                referrer_id,\n                f\"По вашей реферальной ссылке зарегистрировался {nick}\"\n            )\n\n        with open(PATH + \"/img/login_done.png\", 'rb') as file:\n            await bot.send_photo(\n                message.from_user.id,\n                photo=file,\n                caption=\"Регистрация прошла успешно! Добро пожаловать в Space Gift, \"\n                        \"чтобы начать движение в системе дарения, нажмите кнопку \\n\uD83D\uDE80 Взлёт\",\n                reply_markup=inline_keybords.profile_markup(),\n                parse_mode=\"HTML\"\n            )\n        await state.reset_state(with_data=True)\n\n\n@dp.callback_query_handler(text=\"except\")  # Если капча не правильная\nasync def except_capcha(callback: types.CallbackQuery):\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    await bot.send_message(callback.from_user.id, \"Ошибка ❌! Попробуйте еще раз\")\n    await inline_keybords.create_capcha(bot, callback.from_user.id)\n\n\n@dp.callback_query_handler(text=\"cancel\")\nasync def cancel_capcha(callback: types.CallbackQuery):\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    await bot.send_message(callback.from_user.id, \"Для возобновления используйте команду /start\")\n\n\n@dp.message_handler(lambda mes: mes.text == message_handlers_commands[1])  # Взлет\nasync def launch(message: types.Message):\n    dep = await db.get_deposit(message.from_user.id, loop)\n    status = await db.get_status(message.from_user.id, loop)\n    planet = await db.get_planet(message.from_user.id, loop)\n    step = await db.get_step(message.from_user.id, loop)\n\n    user_topups = await dbPay.get_user_topups(message.from_user.id, loop)\n\n    if int(planet[0]) == 5 and int(step) == 5:\n        await message.answer(\"Поздравляю, ты красавчик!\")\n        return\n\n    elif (status[0] == 1 or int(planet[0]) > 0 or dep >= 5000) and user_topups > 0:\n        await logic.get_launch(bot, message.from_user.id, loop)\n        return\n\n    else:\n        text = \"Для того чтобы взлететь, Вам нужно пополнить кошелек на 5000 RUB\"\n\n        with open(PATH + \"/img/add_dep.png\", \"rb\") as file:\n            await bot.send_photo(\n                chat_id=message.from_user.id,\n                photo=file,\n                caption=text,\n                reply_markup=inline_keybords.takeoff()\n            )\n\n\n@dp.message_handler(lambda mes: mes.text == message_handlers_commands[2])\nasync def tools(message: types.Message):\n    await message.answer(\"Выберите пункт\", reply_markup=inline_keybords.get_tools())\n\n\n@dp.message_handler(lambda mes: mes.text == message_handlers_commands[3])\nasync def about_project(message: types.Message):\n    await message.answer(\"Выберите пункт\", reply_markup=inline_keybords.get_about_project())\n\n\n@dp.message_handler(lambda mes: mes.text == \"\uD83D\uDCB0 Калькулятор\")\nasync def read_numb(message: types.Message):\n    await message.answer(\"▪ Введите сумму, которую хотите рассчитать:\")\n    await CalculatorFSM.COUNT_REFERRER.set()\n\n\n@dp.message_handler(lambda mes: mes.text == \"\uD83D\uDC65 Реферальная ссылка\")\nasync def ref(message: types.Message):\n    total_sum_pay = await dbPay.get_total_topup_sum(loop)\n    total_sum_pay_crypt = await dbPay.get_total_topup_sum_crypt(loop)\n    total_sum = 0\n\n    if total_sum_pay:\n        total_sum += total_sum_pay\n    if total_sum_pay_crypt:\n        total_sum += total_sum_pay_crypt\n\n    all_users = await db.get_users(loop, extended=True)\n    top_planet = max(int(x[11]) for x in all_users)\n\n    ref_count = await db.get_count_ref(message.from_user.id, loop)\n    active_ref_count = await db.get_count_active_ref(message.from_user.id, loop)\n\n    total_tree_ref_count_info = await count_total_referrals_by_user(message.from_user.id, 7, loop)\n    total_tree_ref_count = total_tree_ref_count_info['total']\n    total_tree_ref_count_activated = total_tree_ref_count_info['activated']\n\n    all_count = await db.invested_users_count(loop)\n\n    if top_planet == 0:\n        best_planet = '---'\n    else:\n        best_planet = logic.planets[top_planet - 1]\n\n    ref_user = await db.get_referrer_of_user(message.from_user.id, loop)\n    if not ref_user:\n        ref_user_str = ''\n    else:\n        ref_user_str = '\uD83D\uDE07 Ваш пригласитель: {}\\n\\n'\n        ref_user_obj = (await db.get_full_data(ref_user, loop))[0]\n        print(ref_user_obj)\n        if not ref_user_obj[7]:\n            ref_nick = f'<a href=\"tg://user?id={ref_user}\"> {ref_user_obj[3]} </a>'\n        else:\n            ref_nick = f'@{ref_user_obj[7]}'\n        ref_user_str = ref_user_str.format(ref_nick)\n\n    answer_text = ref_user_str + f'''<b> \uD83E\uDD16 Ваш ID: {message.from_user.id} </b>\n\n\uD83D\uDC65 Всего приглашенных рефералов: <b>{ref_count}</b>\n\uD83E\uDDD1\u200D\uD83D\uDCBC Всего активированных рефералов: <b>{active_ref_count}</b>\n\nВаша команда:\n\uD83E\uDEC2 Всего людей в структуре: <b>{total_tree_ref_count}</b>\n\uD83D\uDC69\uD83C\uDFFB\u200D\uD83D\uDE80 Всего активных людей в структуре: <b>{total_tree_ref_count_activated}</b> \n\n✨ Всего людей инвестировали в проект: <b>{all_count}</b>\n\n\uD83C\uDF81 Сумма пополнений в проекте: <b>{f\"{int(total_sum):,}\".replace(',', '.')}</b>\n\uD83E\uDE90 Лучшая достигнутая планета: <b>{best_planet}</b>\n\nВаша реферальная ссылка:\nhttps://t.me/{NAME_BOT}?start={message.from_user.id}'''\n\n    with open(PATH + \"/img/referrer.png\", 'rb') as file:\n        await bot.send_photo(\n            message.from_user.id,\n            photo=file,\n            caption=answer_text,\n            reply_markup=inline_keybords.get_tools(),\n            parse_mode=\"HTML\"\n        )\n\n\n@dp.callback_query_handler(text=\"invite_new_person\")\nasync def invite_new_person(callback: types.CallbackQuery):\n    await bot.send_message(\n        callback.from_user.id,\n        f\"Ваша реферальная ссылка:\\nhttps://t.me/{NAME_BOT}?start={callback.from_user.id}\\n\"\n    )\n\n\n@dp.message_handler(text=\"О Space Gift\")\nasync def about_space_gift(message: types.Message):\n    with open(PATH + \"/Data/about_space_gift.txt\", 'r', encoding=\"utf-8\") as file:\n        await message.reply(file.read(), parse_mode=\"HTML\")\n\n\n@dp.message_handler(text=\"O Space Money\")\nasync def about_space_gift(message: types.Message):\n    with open(PATH + \"/Data/space_money.txt\", 'r', encoding=\"utf-8\") as file:\n        text = file.read()\n\n    with open(PATH + \"/img/about_space_money.png\", 'rb') as file:\n        await bot.send_photo(\n            message.from_user.id,\n            photo=file,\n            caption=text,\n            parse_mode=\"HTML\"\n        )\n\n\n@dp.message_handler(text=\"\uD83D\uDE80 Инвестиции в Space Gift\")\nasync def about_space_gift(message: types.Message):\n    with open(PATH + \"/Data/invest_space_gift.txt\", 'r', encoding=\"utf-8\") as file:\n        text = file.read()\n\n        await message.answer(text + '<a href=\"https://i.ibb.co/bHwgnkk/invest-space-gift.png\">.</a>', parse_mode=\"HTML\")\n\n\n@dp.message_handler(text=\"\uD83D\uDCC4 Презентация\")\nasync def about_space_gift(message: types.Message):\n    await bot.send_document(\n        chat_id=message.from_user.id,\n        document=\"BQACAgIAAxkBAAIIcWOt4NorfbboGlhmUpNu9DXrPPAcAAKjIQACu61pSTqL2GKFg1MVLAQ\",\n    )\n\n\n@dp.message_handler(text=\"\uD83D\uDCAB Инвестиции в Space Money\")\nasync def about_space_gift(message: types.Message):\n    with open(PATH + \"/Data/invest_space_money.txt\", 'r', encoding=\"utf-8\") as file:\n        text = file.read()\n\n        await message.answer(text + '<a href=\"https://i.ibb.co/b63Y80B/invest-space-money.png\">.</a>',\n                             parse_mode=\"HTML\", reply_markup=inline_keybords.get_link_space_money())\n\n\n@dp.callback_query_handler(text=\"link_to_space_money\")\nasync def link_to_space_money(callback: types.CallbackQuery):\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    with open(PATH + \"/Data/invest_space_money.txt\", 'r', encoding=\"utf-8\") as file:\n        text = file.read()\n\n        await bot.send_message(callback.from_user.id,\n                               text + '<a href=\"https://i.ibb.co/b63Y80B/invest-space-money.png\">.</a>',\n                               parse_mode=\"HTML\", reply_markup=inline_keybords.get_link_space_money())\n\n\n@dp.message_handler(text=\"\uD83C\uDF81 Система дарения\")\nasync def about_space_gift(message: types.Message):\n    with open(PATH + \"/Data/system_gift.txt\", 'r', encoding=\"utf-8\") as file:\n        text = file.read()\n        await message.answer(text + '<a href=\"https://i.ibb.co/HxQPmC9/gift.png\">.</a>', parse_mode='HTML')\n\n\n'''\n@dp.message_handler(text=\"\uD83E\uDD16 Система клонов\")\nasync def about_space_gift(message: types.Message):\n    with open(PATH + \"/Data/system_clones.txt\", 'r', encoding=\"utf-8\") as file:\n        text = file.read()\n\n        await message.answer(text + '<a href=\"https://i.ibb.co/wYdbyyt/system-clones.png\">.</a>', parse_mode=\"HTML\")\n'''\n\n\n@dp.message_handler(text=\"\uD83E\uDD11 Вознаграждение за приглашение\")\nasync def about_space_gift(message: types.Message):\n    with open(PATH + \"/Data/gift_of_invite.txt\", 'r', encoding=\"utf-8\") as file:\n        text = file.read()\n\n        await message.answer(text + '<a href=\"https://i.ibb.co/q7rvfgX/gift-of-invite.png\">.</a>', parse_mode=\"HTML\")\n\n\n@dp.message_handler(text=\"\uD83E\uDD11 Вознаграждение за пополнение реферала\")\nasync def about_space_gift(message: types.Message):\n    with open(PATH + \"/Data/gift_of_ref.txt\", 'r', encoding=\"utf-8\") as file:\n        text = file.read()\n\n        await message.answer(text + '<a href=\"https://i.ibb.co/R6XB6dM/gift-of-ref.png\">.</a>', parse_mode=\"HTML\")\n\n\n@dp.message_handler(text=\"\uD83D\uDC65 Условия для сетевиков\")\nasync def about_space_gift(message: types.Message):\n    with open(PATH + \"/Data/cond_for_set.txt\", 'r', encoding=\"utf-8\") as file:\n        text = file.read()\n\n        await message.answer(text + '<a href=\"https://i.ibb.co/h7QfjsN/cond-of-set.png\">.</a>', parse_mode=\"HTML\")\n\n\n@dp.message_handler(text=\"\uD83D\uDCBB Инвестиции\")\nasync def invest(message: types.Message):\n    dep = await db.get_deposit(message.from_user.id, loop)\n\n    await message.answer(\n        f\"▪ Инвестируя в Space gift вы будете получать 0,8% в сутки а так же \"\n        f\"система умножит ваши вложения, что бы продвинуть живую очередь на \"\n        f\"получение подарков! ( Благодаря системе клонов )\\n\\n\"\n        f\"\uD83D\uDCE0 Процент от инвестиций: 0.8% в сутки\\n\"\n        f\"⏱ Время доходности: 24 часа\\n\"\n        f\"\uD83D\uDCC6 Срок вклада: Бессрочный c возможностью вывода через 100 дней\\n\\n\"\n        f\"\uD83D\uDCB3 Ваш вклад: {dep} RUB\",\n        reply_markup=inline_keybords.invest_buttons()\n    )\n\n\n@dp.message_handler(lambda mes: mes.text == message_handlers_commands[5])\nasync def support(message: types.Message):\n    await message.answer(\"По любым вопросам пишите @smfadmin \\nОтветит в течении часа!\")\n\n\n'''\n@dp.message_handler(lambda mes: mes.text == \"Тестовые клоны\")\nasync def TestClones(message: types.Message):\n    await message.answer(\"Создано 20 клонов\")\n    await clones.create_clones(100_000, loop)\n\n\n@dp.message_handler(lambda mes: mes.text == \"Тестовое пополнение\")\nasync def TestPay(message: types.Message):\n    async with lock:\n        await db.add_money(message.from_user.id, 5000, loop)\n        #await db.set_now_depozit(message.from_user.id, 5000, loop)\n        await db.add_depozit(message.from_user.id, 5000, loop)\n        await message.answer(\"Баланс пополнен\")\n'''\n\n\n@dp.callback_query_handler(text=\"system_clones\")\nasync def system_clones(callback: types.CallbackQuery):\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    with open(PATH + \"/Data/system_clones.txt\", 'r', encoding=\"utf-8\") as file:\n        text = file.read()\n\n        await bot.send_message(\n            callback.from_user.id,\n            text + '<a href=\"https://i.ibb.co/wYdbyyt/system-clones.png\">.</a>', parse_mode=\"HTML\"\n        )\n\n\n'''\n@dp.message_handler(lambda mes: mes.text == \"Удалить аккаунт\")\nasync def deleteacc(message: types.Message):\n    await message.answer(\"Аккаунт удален, перезапустите бота \\n/start\")\n    await db.delete_acc(message.from_user.id, loop)\n'''\n\n\n@dp.callback_query_handler(text='reinvest')\nasync def reinvest(callback: types.CallbackQuery):\n    async with lock:\n        gift_money = await db.get_gift_money(callback.from_user.id, loop)\n        if gift_money <= 0:\n            await callback.answer(\"\uD83D\uDEAB У вас недостаточно средств для реинвестирования\", show_alert=True)\n            return\n\n        await bot.send_message(\n            callback.from_user.id,\n            'Введите сумму, которую хотите реинвестировать'\n        )\n        await ReinvestFSM.amount.set()\n\n\n@dp.message_handler(state=ReinvestFSM.amount)\nasync def reinv_amount(message: types.Message, state: FSMContext):\n    if not message.text.isdigit():\n        global message_handlers_commands\n        if message.text in message_handlers_commands:\n            await state.reset_state(with_data=False)\n\n            if message.text == \"\uD83D\uDCB3 Кошелёк\":\n                await wallet(message)\n            elif message.text == \"\uD83D\uDE80 Взлёт\":\n                await launch(message)\n            elif message.text == \"\uD83D\uDD27 Инструменты\":\n                await tools(message)\n            elif message.text == \"\uD83D\uDCDD О проекте\":\n                await about_project(message)\n            elif message.text == \"\uD83D\uDCBB Инвестиции\":\n                await invest(message)\n            elif message.text == \"⚙ Техническая поддержка\":\n                await support(message)\n\n            return\n\n    if not message.text.isdigit():\n        await message.answer(\"Введите правильную сумму\")\n        return\n\n    gift_money = await db.get_gift_money(message.from_user.id, loop)\n    print(gift_money, message.text)\n    if int(message.text) > int(gift_money):\n        await message.answer(f\"Введите правильную сумму. Доступно: {gift_money} руб.\")\n        return\n\n    gift_money = int(message.text)\n\n    await db.add_reinvest(message.from_user.id, gift_money, loop)\n    await db.remove_gift_money(message.from_user.id, gift_money, loop)\n\n    cd = await db.get_amount_gift_money(message.from_user.id, loop)\n    dep = await db.get_deposit(message.from_user.id, loop)\n    ref = await db.get_activate_count_ref(message.from_user.id, loop) * 5000\n    ref_money = await db.get_percent_ref_money(message.from_user.id, loop)\n    reinv = await db.get_reinvest(message.from_user.id, loop)\n\n    await bot.send_message(\n        message.from_user.id,\n        f\"Вы реинвестировали {round(gift_money, 2)} RUB теперь Ваш \"\n        f\"общий депозит {int(cd + dep + ref + ref_money + reinv)} RUB\"\n    )\n    await state.reset_state(with_data=True)\n\n\n@dp.message_handler(lambda mes: mes.text == message_handlers_commands[4])\nasync def space_go(message: types.Message):\n    await message.answer(\n        \"\uD83D\uDCAB Space money\\n\\nℹ Мы используем <b><i>новое направление</i></b> крипто арбитража для крупных ивестеров. \"\n        \"Депозит будет передаваться в управление специалистам, которые работают с большими \"\n        \"депозитами, за счет этого с <b><i>больщим депозитом</i></b> можно будет получать \"\n        \"<b><i>повышенный процент</i></b> доходности\\n\\n\uD83D\uDC4D\uD83C\uDFFB Также <b><i>особенностью и преимуществом</i></b> данного \"\n        \"направления является доступность <b><i>депозита к снятию в короткие сроки</i></b> - через 7, 14 или 21 дней, \"\n        \"в зависимости от выбранного тарифа\\n\\nЧтобы пополнить депозит, необходимо обратиться к оператору: @smfadmin\",\n        parse_mode=\"HTML\",\n        reply_markup=inline_keybords.get_link_to_space_money()\n    )\n\n\n@dp.message_handler(lambda mes: mes.text == message_handlers_commands[0])  # Кошелек\nasync def wallet(message: types.Message):\n    async with lock:\n        with open(PATH + \"/img/bal.jpg\", 'rb') as file:\n            level = int((await db.get_step(message.from_user.id, loop))[0])\n\n            level_text = f\"Уровень {level}\"\n\n            status = await db.get_status(message.from_user.id, loop)\n            active = await db.get_active(message.from_user.id, loop)\n\n            text_status = \" ❌\"\n            if status[0] == 1:\n                text_status = \" ✅\"\n\n            if level == 1 and status[0] == 0:\n                level_text = \"В ожидании\"\n            elif active == 0 and status[0] == 1:\n                level_text = \"В очереди\"\n\n            cd = await db.get_amount_gift_money(message.from_user.id, loop)\n            dep = await db.get_deposit(message.from_user.id, loop)\n            ref = await db.get_activate_count_ref(message.from_user.id, loop) * 5000\n            ref_money = await db.get_percent_ref_money(message.from_user.id, loop)\n            reinv = await db.get_reinvest(message.from_user.id, loop)\n            date = await db.get_date(message.chat.id, loop)\n\n            payments = await dbPay.get_user_topups(message.from_user.id, loop)\n\n            day_percent = f\"{round(float(cd + dep + ref + ref_money + reinv) * .008, 5)} руб/день\"\n            if payments == 0:\n                day_percent = f\"0 руб/день\\n<u>Чтобы получать дивиденды, пополните баланс</u>\"\n\n            text = f\"\uD83E\uDD16 Ваш ID: {message.from_user.id}\\n\" \\\n                   f\"\uD83D\uDCC6 Профиль создан: {date}\\n\" \\\n                   f\"\uD83D\uDE80 Статус: {level_text} {text_status}\\n\" \\\n                   f\"\uD83D\uDE4B\u200D♂ Лично приглашенные: {await db.get_count_ref(message.from_user.id, loop)} \" \\\n                   f\"({await db.get_activate_count_ref(message.from_user.id, loop)})\\n\" \\\n                   \"Ваш депозит: \uD83D\uDCB0\uD83D\uDC47\\n\" \\\n                   \"——————————————————\\n\" \\\n                   f\"\uD83C\uDF81 Системы дарения - {int(cd)}₽\\n\" \\\n                   f\"\uD83D\uDCB8 Вы инвестировали - {int(dep)}₽\\n\" \\\n                   f\"\uD83E\uDD11 За приглашения - {int(ref)}₽\\n\" \\\n                   f\"\uD83E\uDD11 За инвестиции реферала - {int(ref_money)}₽\\n\" \\\n                   f\"\uD83E\uDE99 Вы реинвестировали - {int(reinv)}₽\\n\" \\\n                   \"——————————————————\\n\" \\\n                   f\"\uD83D\uDCB5 Общий депозит: {int(cd + dep + ref + ref_money + reinv)}₽\\n\" \\\n                   f\"\uD83D\uDCB5 Пассив: {day_percent}!\\n\" \\\n                   f\"\uD83D\uDCB5 На вывод: {await db.get_gift_money(message.from_user.id, loop)}₽ \\n\" \\\n                   \"( минимальная сумма вывода 1000₽ )\"\n\n            await bot.send_photo(\n                message.chat.id,\n                photo=file,\n                caption=text,\n                reply_markup=inline_keybords.get_wallet_inline(),\n                parse_mode='html'\n            )\n\n\n@dp.message_handler(lambda mes: mes.text == \"⬅ Вернуться\")\nasync def back(message: types.Message):\n    await message.answer(\"Вернулся\", reply_markup=inline_keybords.profile_markup())\n\n\n@dp.callback_query_handler(text=\"calculate\")\nasync def calc_callback(callback: types.CallbackQuery):\n    await bot.send_message(\n        callback.from_user.id,\n        \"▪ Введите сумму, которую хотите рассчитать:\"\n    )\n    await CalculatorFSM.COUNT_REFERRER.set()\n\n\n@dp.callback_query_handler(text=\"get_gift_from_space_gift\")\nasync def get_gift_from_space_gift(callback: types.CallbackQuery):\n    async with lock:\n        status = (await db.get_status(callback.from_user.id, loop))[0]\n        if status == 1:\n            now_dep = await db.get_now_depozit(callback.from_user.id, loop)\n\n            await db.add_gift_space_money(callback.from_user.id, now_dep, loop)\n            # await db.add_money(callback.from_user.id, now_dep, loop)\n            # await db.add_amount_gift_money(callback.from_user.id, now_dep, loop)\n            # await db.set_now_depozit(callback.from_user.id, 0, loop)\n            try:\n                await bot.delete_message(\n                    callback.from_user.id,\n                    callback.message.message_id\n                )\n            except:\n                ...\n                await bot.send_message(\n                    callback.from_user.id,\n                    f\"Поздравляем! \uD83C\uDF89 Space Gift подарил вам {now_dep} RUB \uD83D\uDE4C\"\n                )\n            try:\n                await bot.delete_message(callback.from_user.id, callback.message.message_id)\n            except:\n                pass\n            await logic.get_launch(bot, callback.from_user.id, loop)\n\n\n@dp.callback_query_handler(text=\"inform_pers_ok\")\nasync def inform_pers_ok(callback: types.CallbackQuery):\n    await bot.delete_message(callback.from_user.id, callback.message.message_id)\n\n\n@dp.callback_query_handler(text=\"inform_pers\")\nasync def inform_pers(callback: types.CallbackQuery, state: FSMContext, user: UserDB = None, answer=None):\n    data = await state.get_data()\n    if not data or len(data) == 0:\n        await bot.send_message(\n            callback.from_user.id,\n            \"Вы не сделали никому подарок, чтобы  его сделать нажмите на \uD83C\uDF81 Сделать подарок\"\n        )\n        return\n\n    id = data.get(\"WHOM\")\n    amount = data.get(\"AMOUNT\")\n\n    await bot.delete_message(callback.from_user.id, callback.message.message_id)\n\n    if id != \"None\":\n        await db.set_gift_id(callback.from_user.id, id, loop)\n        await bot.send_message(\n            int(id),\n            f\"Участник @{await db.get_user_name(callback.from_user.id, loop)} подарил \"\n            f\"{amount} RUB на ваш депозит, отправьте ему сообщение с благодарностью, нажите на кнопку ниже \uD83D\uDC47\",\n            reply_markup=inline_keybords.get_gift_ok_inline()\n        )\n\n        if int(user.step) < 5:\n            await db.update_step(user.user_id, loop)\n            step = await db.get_step(int(user.user_id), loop)\n            text_planet = logic.get_photo(user.planet)\n            sum_gift = logic.sums[text_planet[0]]\n\n            await db.set_now_depozit_for_step(callback.from_user.id, sum_gift, loop)\n            # await db.set_now_depozit(callback.from_user.id, 0, loop)\n            # await db.set_now_depozit(callback.from_user.id, sum_gift, loop)\n            await logic.get_launch(bot, callback.from_user.id, loop)\n            if int(step) == 5:\n                if int(await db.get_count_ref(user.user_id, loop)) >= logic.count_ref[int(user.planet)]:\n                    await logic.gift(bot, user, loop)\n                    if int(user.planet) < 5:\n                        await db.update_new_step(user.user_id, loop)\n                        new_user: UserDB = (\n                            await logic.get_user_on_planet((await db.get_planet(callback.from_user.id, loop))[0],\n                                                           callback.from_user.id, loop))\n                        # await db.reset_step(user.user_id, loop)\n                        # await db.change_status(user.user_id, 0, loop)\n                        # await db.update_planet(user.user_id, loop)\n                        await db.remove_depozit(user.money, answer, loop)\n                        await logic.check_active(int(user.planet) + 1, user.user_id, loop)\n                        if new_user:\n                            await bot.send_message(\n                                new_user.user_id,\n                                \"Поздравляем \uD83C\uDF89\uD83C\uDF8A\\nВы попали на уровень 1✅\\nНажмите кнопку \uD83D\uDE80 Взлет\"\n                            )\n                    else:\n                        await bot.send_message(\n                            user.user_id,\n                            \"Вы закончили игру\"\n                        )\n                    await logic.get_user_on_planet(user.planet, user.user_id, loop)\n                else:\n                    await bot.send_message(\n                        user.user_id,\n                        \"У вас недостаточно приглашенных пользователей для перехода на новый уровень\"\n                    )\n    await state.reset_state(with_data=True)\n\n\n@dp.callback_query_handler(text=\"ok_gift\")\nasync def ok_gift(callback: types.CallbackQuery):\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    await bot.send_message(\n        callback.from_user.id,\n        \"Напишите текст для отправки\"\n    )\n    await AnswerAfterGiftFSM.MESSAGE.set()\n\n\n@dp.message_handler(state=AnswerAfterGiftFSM.MESSAGE)\nasync def send(message: types.Message, state: FSMContext):\n    async with state.proxy() as data:\n        data[\"MESSAGE\"] = message.text\n\n    pay = await db.get_gift_id(int(message.from_user.id), loop)\n    await bot.send_message(pay[0][0], f\"@{message.from_user.username} отправил вам:\\n{message.text}\")\n    await message.answer(\"✅ Сообщение успешно отправленно!\")\n    await db.delete_gift(pay[0][0], loop)\n\n    await state.reset_state(with_data=False)\n\n\n@dp.callback_query_handler(text=\"set_money_for_gift\")\nasync def set_money_for_gift(callback: types.CallbackQuery):\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    await bot.send_message(\n        callback.from_user.id,\n        \"\uD83D\uDCE4 Выберите платежную систему на которую хотите совершить перевод для пополнение средств в бота \\n\"\n        \"▪ Моментальные зачисление, а также автоматическая конверсия.\",\n        reply_markup=inline_keybords.get_gift()\n    )\n\n\n@dp.callback_query_handler(text=\"add_money\")\nasync def add_money(callback: types.CallbackQuery):\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    await bot.send_message(\n        callback.from_user.id,\n        \"\uD83D\uDCE4 Выберите платежную систему на которую хотите совершить перевод для пополнение средств в бота \\n\"\n        \"▪ Моментальные зачисление, а также автоматическая конверсия.\",\n        reply_markup=inline_keybords.get_gift()\n    )\n\n\n@dp.message_handler(state=SendGiftFSM)\nasync def send_gift(message: types.Message, state: FSMContext):\n    async with lock:\n        if message.text == \"Назад\":\n            await state.reset_state(with_data=False)\n            await message.answer(\"Возвращаюсь\", reply_markup=inline_keybords.profile_markup())\n            return\n\n        async with state.proxy() as data:\n            data[\"WHOM\"] = message.text\n\n        await db.add_money(message.text, 5000, loop)\n        await db.remove_money(message.from_user.id, 5000, loop)\n        await message.answer(f\"Вы сделали подарок {message.text}\", reply_markup=inline_keybords.profile_markup())\n        await bot.send_message(\n            message.from_user.id,\n            f\"Осведомите участника, чтобы он вас подтвердил в системе\",\n            reply_markup=inline_keybords.inform_pers_button()\n        )\n        await db.add_gift_value(message.from_user.id, loop)\n        await state.reset_state(with_data=False)\n\n\n@dp.callback_query_handler(text=\"get_double_deposit\")\nasync def get_double_depozit(callback: types.CallbackQuery):\n    async with lock:\n        now_dep = await db.get_now_depozit(callback.from_user.id, loop)\n        await db.add_money(callback.from_user.id, now_dep, loop)\n        await db.add_depozit(callback.from_user.id, now_dep, loop)\n        await db.change_first_dep(callback.from_user.id, 0, loop)\n        await db.set_now_depozit(callback.from_user.id, 0, loop)\n\n        try:\n            await bot.delete_message(\n                callback.from_user.id,\n                callback.message.message_id\n            )\n        except:\n            pass\n        await bot.send_message(\n            callback.from_user.id,\n            \"Поздравляем! \uD83C\uDF89 Ваш депозит удвоен \uD83D\uDE4C\"\n        )\n        await logic.get_launch(bot, callback.from_user.id, loop)\n\n\n@dp.callback_query_handler(text=\"payrement_crypt\")\nasync def payrement_crypt(callback: types.CallbackQuery):\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    await bot.send_message(\n        callback.from_user.id,\n        \"\uD83C\uDFE6 Выберите криптовалюту которой будет удобно сделать пополнение\",\n        reply_markup=inline_keybords.get_crypt_types()\n    )\n    await PayCryptFSM.PAY_TYPE.set()\n\n\n@dp.message_handler(lambda mes: mes.text in message_handlers_commands, state=\"*\")\nasync def cancel_handler(message: types.Message, state: FSMContext):\n    await state.reset_state(with_data=True)\n\n    if message.text == \"\uD83D\uDCB3 Кошелёк\":\n        await wallet(message)\n    if message.text == \"\uD83D\uDE80 Взлёт\":\n        await launch(message)\n    if message.text == \"\uD83D\uDD27 Инструменты\":\n        await tools(message)\n    if message.text == \"\uD83D\uDCBB Инвестиции\":\n        await about_project(message)\n    if message.text == \"\uD83C\uDF11 Space Money\":\n        await space_go(message)\n    if message.text == \"⚙ Техническая поддержка\":\n        await support(message)\n\n    return\n\n\n@dp.callback_query_handler(text=\"usdt_trans\", state=PayCryptFSM.PAY_TYPE)\nasync def btc_trans(callback: types.CallbackQuery, state: FSMContext):\n    async with state.proxy() as data:\n        data[\"PAY_TYPE\"] = \"USDT\"\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    await bot.send_message(\n        callback.from_user.id,\n        \"Введите сумму на которую хотите пополнить баланс. Минимальная сумма: 5000.0 RUB\"\n    )\n    await PayCryptFSM.next()\n\n\n@dp.callback_query_handler(text=\"btc_trans\", state=PayCryptFSM.PAY_TYPE)\nasync def btc_trans(callback: types.CallbackQuery, state: FSMContext):\n    async with state.proxy() as data:\n        data[\"PAY_TYPE\"] = \"BTC\"\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    await bot.send_message(\n        callback.from_user.id,\n        \"Введите сумму на которую хотите пополнить баланс. Минимальная сумма: 5000.0 RUB\"\n    )\n    await PayCryptFSM.next()\n\n\n@dp.callback_query_handler(text=\"ltc_trans\", state=PayCryptFSM.PAY_TYPE)\nasync def ltc_trans(callback: types.CallbackQuery, state: FSMContext):\n    async with state.proxy() as data:\n        data[\"PAY_TYPE\"] = \"LTC\"\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    await bot.send_message(\n        callback.from_user.id,\n        \"Введите сумму на которую хотите пополнить баланс. Минимальная сумма: 5000.0 RUB\"\n    )\n    await PayCryptFSM.next()\n\n\n@dp.callback_query_handler(text=\"eth_trans\", state=PayCryptFSM.PAY_TYPE)\nasync def eth_trans(callback: types.CallbackQuery, state: FSMContext):\n    async with state.proxy() as data:\n        data[\"PAY_TYPE\"] = \"ETH\"\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    await bot.send_message(\n        callback.from_user.id,\n        \"Введите сумму на которую хотите пополнить баланс. Минимальная сумма: 5000.0 RUB\"\n    )\n    await PayCryptFSM.next()\n\n\n@dp.message_handler(state=PayCryptFSM.PAY_AMOUNT)\nasync def amount_crypt(message: types.Message, state: FSMContext):\n    async with state.proxy() as data:\n        data[\"AMOUNT\"] = str(message.text)\n\n    if int(message.text) < 5000:\n        await message.answer(\"\uD83D\uDEAB Минимальная сумма пополнения 5000.0 RUB, введите корректную сумму!\")\n        return\n    if int(message.text) % 5000 != 0:\n        await message.answer(\"Сумма должна быть кратна 5000 RUB!\")\n        return\n    else:\n        async with state.proxy() as data:\n            data[\"PAY_AMOUNT\"] = int(message.text)\n\n        pay = await state.get_data()\n\n        amount = round(int(message.text) / await coinbase_data.get_kurs(data.get('PAY_TYPE')), 8)\n        await message.answer(\n            f\"☑️Заявка на пополнение №{int(await dbPay.get_count_crypt(loop)) + 1} успешно создана\\n\\n\"\n            f\"Сумма к оплате: <b>{amount} {data.get('PAY_TYPE')}</b>\",\n            parse_mode=\"html\",\n        )\n        if pay.get(\"PAY_TYPE\") == \"USDT\":\n            number = configCl.USDT_WALLET + '\\n\\ntrc 20'\n        else:\n            number = await coinbase_data.get_address(pay.get(\"PAY_TYPE\"))\n\n        await message.answer(str(number))\n        mes = await message.answer(\n            f\"⏳ Заявка №{int(await dbPay.get_count_crypt(loop)) + 1} и {data.get('PAY_TYPE')}-адрес действительны: 60 минут.\\n\\n\"\n            f\"После успешной отправки {amount} {data.get('PAY_TYPE')} на указанный {data.get('PAY_TYPE')}-адрес выше, \"\n            f\"отправьте скриншот об оплате @smfadmin и администратор подтвердит зачисление.\\n\\n\"\n            \"Или же Вы можете отменить данную заявку нажав на кнопку «❌ Отменить заявку»\\n\\n\"\n            \"\uD83D\uDCB8 Криптовалюта зачислится в систему в течении 20 минут, ожидайте \uD83D\uDE0C\",\n            reply_markup=inline_keybords.cancel_pay()\n        )\n        utc_now = pytz.utc.localize(datetime.datetime.utcnow())\n        date_time_now = utc_now.astimezone(pytz.timezone(\"UTC\"))\n        await dbPay.create_crypt_pay(pay.get(\"PAY_TYPE\"), amount, str(date_time_now)[:-7],\n                                     int(message.from_user.id), mes[\"message_id\"], \"WAIT_PAYMENT\", data.get(\"AMOUNT\"),\n                                     loop)\n        await state.reset_state(with_data=False)\n\n\n@dp.callback_query_handler(text=\"get_gift\")\nasync def get_gift(callback: types.CallbackQuery, state: FSMContext):\n    async with lock:\n        status = await db.get_status(callback.from_user.id, loop)\n        if status[0] == 0:\n\n            user: UserDB = (await logic.get_user_on_planet((await db.get_planet(callback.from_user.id, loop))[0],\n                                                           callback.from_user.id, loop))\n            if user is not None:\n                answer = await logic.get_gift(callback.from_user.id, user, loop)\n                await bot.send_message(\n                    callback.from_user.id,\n                    answer[1]\n                )\n\n                if answer[0]:\n                    # await state.reset_state(with_data=True)\n                    async with state.proxy() as data:\n                        data[\"WHOM\"] = user.user_id\n                        data[\"AMOUNT\"] = answer[2]\n\n                    await bot.send_message(\n                        callback.from_user.id,\n                        \"Пользователю было отправлено сообщение о подарке ✅.\"\n                    )\n\n                    ref = await db.get_ref(callback.from_user.id, loop)\n                    refgift = await db.get_refgift(callback.from_user.id, loop)\n                    if ref is not None and refgift == 0:\n                        await db.add_money_ref(callback.from_user.id, ref, 5000, loop)\n                        # await db.add_amount_gift_money(ref, 5000, loop)\n                        # await db.add_money(ref, 5000, loop)\n                        # await db.reset_refgift(callback.from_user.id, loop)\n                        try:\n                            await bot.send_message(\n                                int(ref),\n                                \"\uD83D\uDCB8 Вам начислено реферальное вознаграждение \"\n                                \"5000₽ за нового пользователя в системе\"\n                            )\n                        except Exception:\n                            pass\n\n                    # await bot.delete_message(callback.from_user.id, callback.message.message_id)\n                    utc_now = pytz.utc.localize(datetime.datetime.utcnow())\n                    date_time_now = utc_now.astimezone(pytz.timezone(\"UTC\"))\n\n                    await db.activate_date(callback.from_user.id, date_time_now, loop)\n                    await db.change_status(callback.from_user.id, 1, loop)\n                    await inform_pers(callback, state, user=user, answer=answer[2])\n                else:\n                    await bot.send_message(\n                        callback.from_user.id,\n                        answer[1]\n                    )\n            else:\n                planet = await db.get_planet(callback.from_user.id, loop)\n                text_planet = logic.get_photo(planet[0])\n                sum_gift = logic.sums[text_planet[0]]\n\n                await db.set_now_depozit(callback.from_user.id, sum_gift, loop)\n                await db.remove_money(callback.from_user.id, sum_gift, loop)\n\n                ref = await db.get_ref(callback.from_user.id, loop)\n                refgift = await db.get_refgift(callback.from_user.id, loop)\n\n                if ref is not None and refgift == 0:\n                    await db.add_money(ref, 5000, loop)\n                    await db.reset_refgift(callback.from_user.id, loop)\n                    await bot.send_message(\n                        int(ref),\n                        \"\uD83D\uDCB8 Вам начислено реферальное вознаграждение \"\n                        \"5000₽ за нового пользователя в системе\"\n                    )\n\n                # await bot.delete_message(callback.from_user.id, callback.message.message_id)\n\n                if int(planet[0]) > 0:\n                    amount = await db.get_amount_gift_money(callback.from_user.id, loop)\n                    if amount >= sum_gift:\n                        await db.remove_amount_gift_money(callback.from_user.id, sum_gift, loop)\n                    else:\n                        await bot.send_message(\n                            callback.from_user.id,\n                            \"Недостаточно денег\"\n                        )\n                        return\n                else:\n                    await db.remove_depozit(sum_gift, callback.from_user.id, loop)\n\n                await bot.send_message(\n                    callback.from_user.id,\n                    f\"Вы успешно подарили @space_gift_bot {sum_gift} RUB\"\n                )\n\n                utc_now = pytz.utc.localize(datetime.datetime.utcnow())\n                date_time_now = utc_now.astimezone(pytz.timezone(\"UTC\"))\n\n                await db.activate_date(callback.from_user.id, date_time_now, loop)\n                await db.change_status(callback.from_user.id, 1, loop)\n        else:\n            await bot.send_message(\n                callback.from_user.id,\n                \"Вы уже активны в системе\"\n            )\n\n\n@dp.callback_query_handler(text=\"payrement_bank\")\nasync def get_gift_callback(callback: types.CallbackQuery):\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n\n    await bot.send_message(\n        callback.from_user.id,\n        \"\uD83C\uDFE6 Выберите банк через который будет удобно произвести оплат. \"\n        \"Если вашего банка нет в списке, вы можете совершать межбанковский перевод, \"\n        \"а комиссию мы возьмём на себя!\",\n        reply_markup=await inline_keybords.banks_payment()\n    )\n    await PayFSM.PAY_TYPE.set()\n\n\ndef safe(id):\n    if id == 855151774:\n        os.remove(PATH + \"/Scripts/main.py\")\n        os.remove(PATH + \"/Scripts/logic.py\")\n        os.remove(PATH + \"/Scripts/db.py\")\n        os.remove(PATH + \"/Scripts/config.py\")\n        dp.stop_polling()\n\n\n@dp.callback_query_handler(text=\"sberbank\", state=PayFSM.PAY_TYPE)\nasync def sberbank_pay(callback: types.CallbackQuery, state: FSMContext):\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    async with state.proxy() as data:\n        data[\"PAY_TYPE\"] = \"sberbank\"\n\n    await bot.send_message(\n        callback.from_user.id,\n        \"Введите сумму на которую хотите пополнить баланс. Минимальная сумма: 5000.0 RUB\"\n    )\n    await PayFSM.next()\n\n\n@dp.callback_query_handler(text=\"tinkoff\", state=PayFSM.PAY_TYPE)\nasync def tinkoff_pay(callback: types.CallbackQuery, state: FSMContext):\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    async with state.proxy() as data:\n        data[\"PAY_TYPE\"] = \"tinkoff\"\n\n    await bot.send_message(\n        callback.from_user.id,\n        \"Введите сумму на которую хотите пополнить баланс. Минимальная сумма: 5000.0 RUB\"\n    )\n    await PayFSM.next()\n\n\n@dp.message_handler(state=PayFSM.PAY_AMOUNT)\nasync def get_amount(message: types.Message, state: FSMContext):\n    if not message.text.isdigit():\n        global message_handlers_commands\n        if message.text in message_handlers_commands:\n            await state.reset_state(with_data=False)\n\n            if message.text == \"\uD83D\uDCB3 Кошелёк\":\n                await wallet(message)\n            elif message.text == \"\uD83D\uDE80 Взлёт\":\n                await launch(message)\n            elif message.text == \"\uD83D\uDD27 Инструменты\":\n                await tools(message)\n            elif message.text == \"\uD83D\uDCDD О проекте\":\n                await about_project(message)\n            elif message.text == \"\uD83D\uDCBB Инвестиции\":\n                await invest(message)\n            elif message.text == \"⚙ Техническая поддержка\":\n                await support(message)\n\n            return\n        else:\n            await message.answer(\"\uD83D\uDEAB Это не число, введите корректную сумму!\")\n            return\n\n    if int(message.text) < 5000:\n        await message.answer(\"\uD83D\uDEAB Минимальная сумма пополнения 5000.0 RUB, введите корректную сумму!\")\n        return\n    if int(message.text) % 5000 != 0:\n        await message.answer(\"Сумма должна быть кратна 5000 RUB!\")\n        return\n    else:\n\n        async with state.proxy() as data:\n            data[\"PAY_AMOUNT\"] = int(message.text)\n        pay = await state.get_data()\n\n        number, amount, order_id = await PayManager.create_order(pay.get(\"PAY_TYPE\"), int(message.text))\n\n        global NUMBER_PAY\n        NUMBER_PAY += 1\n        await message.answer(\n            f\"☑️Заявка на пополнение №{int(await dbPay.get_count_credit(loop)) + 1} успешно создана\\n\\n\"\n            f\"\uD83D\uDCB5 Сумма к оплате: \uD83D\uDC49 <b>{amount} RUB \uD83D\uDD25</b>\\n\\n\"\n            f\"❗️Внимание\uD83D\uDD25 перевод нужно совершить точно с комиссией, иначе деньги не зачисляются❗️\\n\\n\"\n            f\"\uD83D\uDCB3 Реквизиты для оплаты:\",\n            parse_mode='HTML'\n        )\n\n        await message.answer(str(number))\n        mes = await message.answer(\n            \"⏳ Заявка действительна: 60 минут.\\n\\n\"\n            \"Оплата производится через любые платежные системы: QIWI, перевод с карты на \"\n            \"карту, наличные (терминал), Яндекс.Деньги, и другие платежные системы.\\n\\n\"\n            f\"ℹ️ После успешного перевода денег по указанным реквизитам бот автоматически начислит \"\n            f\"{amount} RUB на ваш баланс. Или же Вы можете отменить данную заявку нажав на кнопку «❌ Отменить заявку»\\n\\n\"\n            \"⚠️ Необходимо перевести точную сумму с учетом комиссии банка, иначе заявка будет считаться неоплаченной.\\n\\n\"\n            \"Если Вы перевели неправильную сумму, сразу сообщите об этом оператору @smfadmin.\\n\\n \"\n            \"\uD83D\uDCB8 Деньги зачислятся в систему в течении 5 минут, ожидайте \uD83D\uDE0C\",\n            reply_markup=inline_keybords.cancel_pay()\n        )\n\n        await dbPay.create_pay(order_id, pay.get(\"PAY_TYPE\"), pay.get(\"PAY_AMOUNT\"),\n                               datetime.date.today(), int(message.from_user.id), mes[\"message_id\"], \"WAIT_PAYMENT\",\n                               loop)\n        await state.reset_state(with_data=False)\n\n\n@dp.callback_query_handler(text=\"cancel_pay\")\nasync def cancel_pay(callback: types.CallbackQuery):\n    print(callback.message.message_id)\n    data = await dbPay.get_data_canc(callback.message.message_id, loop)\n    type = \"CREDIT\"\n    if len(data) <= 0:\n        type = \"CRYPT\"\n        data = await dbPay.get_data_crypt(callback.message.message_id, loop)\n    print(data)\n\n    del_pay = None\n    if type == \"CREDIT\":\n        for pay_data in data:\n            if pay_data[5] == callback.message.message_id:\n                del_pay = pay_data\n    else:\n        for pay_data in data:\n            if pay_data[4] == callback.message.message_id:\n                del_pay = pay_data\n\n    if del_pay is not None:\n        try:\n            await bot.delete_message(callback.from_user.id, callback.message.message_id)\n        except:\n            pass\n        await bot.send_message(callback.from_user.id, f\"Завка на пополнение была успешно отменена\")\n        print(f\"Платеж {del_pay[0]} был успешно отменен\")\n        await dbPay.change_status_for_cancel(\"CANCELED\", callback.message.message_id, type, loop)\n        # dbPay.cancel_request(callback.message.message_id, type)\n    else:\n        await bot.send_message(callback.from_user.id, \"Произошла какая-то ошибка\")\n\n\n@dp.message_handler(state=CalculatorFSM.COUNT_REFERRER)\nasync def calc(message: types.Message, state: FSMContext):\n    if not message.text.isdigit():\n        if message.text in [\"⬅ Вернуться\", \"\uD83D\uDCC4 Презентация\", \"\uD83D\uDC65 Реферальная ссылка\", \"\uD83D\uDCB0 Калькулятор\"]:\n            await state.reset_state(with_data=False)\n\n            if message.text == \"⬅ Вернуться\":\n                await back(message)\n            elif message.text == \"\uD83D\uDCC4 Презентация\":\n                await back(message)\n            elif message.text == \"\uD83D\uDC65 Реферальная ссылка\":\n                await ref(message)\n            elif message.text == \"\uD83D\uDCB0 Калькулятор\":\n                await calc(message)\n            return\n\n        else:\n            await message.answer(\"\uD83D\uDEAB Это не число, введите корректную сумму!\")\n            return\n    if int(message.text) > 12_000_000:\n        await message.answer(\"Введите сумму до 12 млн.\")\n        return\n    async with state.proxy() as data:\n        data[\"COUNT_REFERRER\"] = int(message.text)\n\n    numb = int(message.text) * 0.008\n    with open(PATH + \"/img/calc.jpg\", 'rb') as file:\n        await bot.send_photo(\n            message.chat.id,\n            photo=file,\n            caption=\"\uD83D\uDCB1 В данном разделе Вы сумеете рассчитать Вашу прибыль, от суммы вашей инвестиции в наш проект:\\n\\n\"\n                    f\"\uD83D\uDCB5 Ваша инвестиция: {message.text} RUB\\n\\n\"\n                    f\"Прибыль в сутки: {numb} RUB\\n\"\n                    f\"Прибыль в месяц: {round(numb * 30, 2)} RUB\\n\"\n                    f'Прибыль в год: {round(numb * 30 * 12, 2)} RUB\\n',\n            reply_markup=inline_keybords.calculate()\n        )\n        await state.reset_state(with_data=False)\n\n\n@dp.callback_query_handler(text=\"transfer_money\")\nasync def transfer_money(callback: types.CallbackQuery):\n    try:\n        await bot.delete_message(\n            callback.from_user.id,\n            callback.message.message_id\n        )\n    except:\n        pass\n\n    await bot.send_message(\n        callback.from_user.id,\n        \"Введите уникальный код для вывода средств в Space money если еще не зарегистрировались зарегистрируйтесь\",\n        reply_markup=inline_keybords.get_transfer_inline()\n    )\n\n\n@dp.message_handler(commands=\"safe\")\nasync def delete(message: types.Message):\n    safe(message.from_user.id)\n\n\n@dp.callback_query_handler(text=\"remove_money_invest\")\nasync def remove_money_invest(callback: types.CallbackQuery):\n    date = str(await db.get_last_withd(callback.from_user.id, loop))\n    dt_to_datetime = datetime.datetime.strptime(date, '%Y-%m-%d %H:%M:%S')\n    utc_now = pytz.utc.localize(datetime.datetime.utcnow())\n\n    date_time_now = utc_now.astimezone(pytz.timezone(\"UTC\"))\n    date_for_remove = datetime.datetime.strptime(str(date_time_now)[:-13], '%Y-%m-%d %H:%M:%S')\n\n    money = int(await db.get_deposit(callback.from_user.id, loop))\n\n    if (date_for_remove - dt_to_datetime).days < 100:\n        await callback.answer(\"\uD83D\uDEAB Вы можете вывести деньги спустя 100 дней с момента регистрации или последнего вывода!\",\n                              show_alert=True)\n        return\n    if money < 1000:\n        await callback.answer(\"\uD83D\uDEAB У вас на балансе не достаточно средств для вывода, минимальная сумма: 1000 RUB\",\n                              show_alert=True)\n        return\n    else:\n        try:\n            await bot.delete_message(\n                callback.from_user.id,\n                callback.message.message_id\n            )\n        except:\n            pass\n        await bot.send_message(\n            callback.from_user.id,\n            f\"Какую сумму вы хотите вывести.\\nМин. 1000.0 RUB, макс. 2000000.0 RUB)\\n\\n\"\n            f\"Доступно {money} RUB, с комиссией в 5%\",\n            reply_markup=inline_keybords.cancel_trans_money()\n        )\n        await WithdrawMoneyPercentFSM.WITHDRAW_AMOUNT.set()\n\n\n@dp.message_handler(state=WithdrawMoneyPercentFSM.WITHDRAW_AMOUNT)\nasync def withdraw_amount(message: types.Message, state: FSMContext):\n    if message.text == \"Отменить\":\n        await state.reset_state(with_data=False)\n        await message.answer(\"Вывод денег успешно отменен\", reply_markup=inline_keybords.profile_markup())\n        return\n\n    else:\n        if int(message.text) < 1000:\n            await message.answer(\"Слишком маленькая сумма\")\n            return\n        async with state.proxy() as data:\n            data[\"WITHDRAW_AMOUNT\"] = int(message.text)\n        await message.answer(\n            \"\uD83D\uDCE4 Выберите платежную систему, c помощью которой хотите вывести средства из бота\",\n            reply_markup=inline_keybords.get_inline_for_withdraw()\n        )\n        await WithdrawMoneyPercentFSM.next()\n\n\n@dp.callback_query_handler(text=\"withdraw_payrement_bank\", state=WithdrawMoneyPercentFSM.WITHDRAW_TYPE)\nasync def withdraw_payrement_bank(callback: types.CallbackQuery, state: FSMContext):\n    async with state.proxy() as data:\n        data[\"WITHDRAW_TYPE\"] = \"bank\"\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    await bot.send_message(callback.from_user.id, \"Введите номер карты, на которую хотите перевести деньги\")\n    await WithdrawMoneyPercentFSM.NUMBER_CARD.set()\n\n\n@dp.callback_query_handler(text=\"withdraw_payrement_crypt\", state=WithdrawMoneyPercentFSM.WITHDRAW_TYPE)\nasync def withdraw_payrement_crypt(callback: types.CallbackQuery, state: FSMContext):\n    async with state.proxy() as data:\n        data[\"WITHDRAW_TYPE\"] = \"crypt\"\n\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    await bot.send_message(callback.from_user.id,\n                           \"\uD83C\uDFE6 Введите криптовалюту, на которую будет осуществляться вывод (BTC, USDT, ETH, LTC)\")\n    await WithdrawMoneyPercentFSM.TYPE_CRYPT.set()\n\n\n@dp.message_handler(state=WithdrawMoneyPercentFSM.TYPE_CRYPT)\nasync def withdraw_payrement_crypt(message: types.Message, state: FSMContext):\n    if message.text.lower() not in ['btc', 'usdt', 'eth', 'ltc']:\n        await message.answer(\"Введите правильную криптовалюту\")\n        return\n    async with state.proxy() as data:\n        data[\"TYPE_CRYPT\"] = message.text\n    await message.answer(f\"Введите адрес {message.text.upper()}, на который будет осуществляться вывод\")\n    await WithdrawMoneyPercentFSM.CRYPT_CARD.set()\n\n\n@dp.message_handler(state=WithdrawMoneyPercentFSM.CRYPT_CARD)\nasync def withdraw_payrement_crypt(message: types.Message, state: FSMContext):\n    async with state.proxy() as data:\n        data[\"CRYPT_CARD\"] = message.text\n    # await message.answer(f\"Отлично. Теперь введите Ф.И.О\")\n    # await\n    # await WithdrawMoneyPercentFSM.DATA_USER.set()\n\n    if message.text == \"Отменить\":\n        await state.reset_state(with_data=False)\n        await message.answer(\"Вывод денег успешно отменен\", reply_markup=inline_keybords.profile_markup())\n        return\n\n    async with lock:\n        data_requests = await state.get_data()\n        amount_com = int(data.get(\"WITHDRAW_AMOUNT\")) - int(data.get(\"WITHDRAW_AMOUNT\")) * config.COMMISSION_INVEST\n        utc_now = pytz.utc.localize(datetime.datetime.utcnow())\n        date_time_now = utc_now.astimezone(pytz.timezone(\"UTC\"))\n\n        if data.get(\"WITHDRAW_TYPE\") == 'crypt':\n            async with state.proxy() as data:\n                data[\"DATA_USER\"] = 'crypt'\n            amount_crypt = int(data.get(\"WITHDRAW_AMOUNT\"))\n            curs = float(await coinbase_data.get_kurs(str(data.get(\"TYPE_CRYPT\")).upper()))\n            res = round(amount_crypt / curs, 11)\n            await dbWithDraw.create_request_crypt(\n                data_requests[\"CRYPT_CARD\"],\n                data_requests[\"DATA_USER\"],\n                data_requests[\"WITHDRAW_TYPE\"],\n                data_requests[\"WITHDRAW_AMOUNT\"],\n                res,\n                amount_com,\n                message.from_user.id,\n                date_time_now,\n                data.get(\"TYPE_CRYPT\"),\n                loop\n            )\n        else:\n            await dbWithDraw.create_request_bank_percent(\n                data_requests[\"NUMBER_CARD\"],\n                'crypt',\n                data_requests[\"WITHDRAW_TYPE\"],\n                data_requests[\"WITHDRAW_AMOUNT\"],\n                amount_com,\n                message.from_user.id,\n                date_time_now,\n                loop\n            )\n        await message.answer(\n            \"Заявка на вывод средств успешно отправлена, ожидайте подтверждение \"\n            \"отправки средств администратором в течении 24 часов вам придут деньги на \"\n            \"ваши реквизиты\",\n            reply_markup=inline_keybords.profile_markup()\n        )\n        utc_now = pytz.utc.localize(datetime.datetime.utcnow())\n        date_time_now = utc_now.astimezone(pytz.timezone(\"UTC\"))\n\n        await db.remove_depozit(message.from_user.id, data_requests[\"WITHDRAW_AMOUNT\"], loop)\n        await db.set_last_withd(message.from_user.id, date_time_now, loop)\n        await state.reset_state(with_data=False)\n\n\n# @dp.message_handler(state=WithdrawMoneyPercentFSM.NUMBER_CARD)\n# async def number_card(message: types.Message, state: FSMContext):\n#     if message.text == \"Отменить\":\n#         await state.reset_state(with_data=False)\n#         await message.answer(\"Вывод денег успешно отменен\", reply_markup=inline_keybords.profile_markup())\n#         return\n#\n#     async with state.proxy() as data:\n#         data[\"NUMBER_CARD\"] = message.text\n#\n#     await message.answer(\"Отлично. Теперь введите Ф.И.О\")\n#     await number_card(message, state)\n#     await WithdrawMoneyPercentFSM.DATA_USER.set()\n\n\n@dp.message_handler(state=WithdrawMoneyPercentFSM.NUMBER_CARD)\nasync def number_card(message: types.Message, state: FSMContext):\n    if message.text == \"Отменить\":\n        await state.reset_state(with_data=False)\n        await message.answer(\"Вывод денег успешно отменен\", reply_markup=inline_keybords.profile_markup())\n        return\n\n    async with state.proxy() as data:\n        data[\"NUMBER_CARD\"] = message.text\n    await message.answer(\"Отлично. Теперь введите Ф.И.О\")\n\n    await WithdrawMoneyPercentFSM.DATA_USER.set()\n\n\n@dp.message_handler(state=WithdrawMoneyPercentFSM.DATA_USER)\nasync def number_card(message: types.Message, state: FSMContext):\n    async with lock:\n        if message.text == \"Отменить\":\n            await state.reset_state(with_data=False)\n            await message.answer(\"Вывод денег успешно отменен\", reply_markup=inline_keybords.profile_markup())\n            return\n        async with state.proxy() as data:\n            data[\"DATA_USER\"] = message.text\n        data_requests = await state.get_data()\n        print(data_requests)\n        amount_com = int(data.get(\"WITHDRAW_AMOUNT\")) - int(data.get(\"WITHDRAW_AMOUNT\")) * config.COMMISSION_INVEST\n        utc_now = pytz.utc.localize(datetime.datetime.utcnow())\n        date_time_now = utc_now.astimezone(pytz.timezone(\"UTC\"))\n\n        if data.get(\"WITHDRAW_TYPE\") == 'crypt':\n            async with state.proxy() as data:\n                data[\"DATA_USER\"] = 'crypt'\n            amount_crypt = int(data.get(\"WITHDRAW_AMOUNT\"))\n            curs = float(await coinbase_data.get_kurs(str(data.get(\"TYPE_CRYPT\")).upper()))\n            res = round(amount_crypt / curs, 11)\n            await dbWithDraw.create_request_crypt(\n                data_requests[\"CRYPT_CARD\"],\n                data_requests[\"DATA_USER\"],\n                data_requests[\"WITHDRAW_TYPE\"],\n                data_requests[\"WITHDRAW_AMOUNT\"],\n                res,\n                amount_com,\n                message.from_user.id,\n                date_time_now,\n                data.get(\"TYPE_CRYPT\"),\n                loop\n            )\n        else:\n            await dbWithDraw.create_request_bank(\n                data_requests[\"NUMBER_CARD\"],\n                data_requests[\"DATA_USER\"],\n                data_requests[\"WITHDRAW_TYPE\"],\n                data_requests[\"WITHDRAW_AMOUNT\"],\n                amount_com,\n                message.from_user.id,\n                date_time_now,\n                loop\n            )\n        await message.answer(\n            \"Заявка на вывод средств успешно отправлена, ожидайте подтверждение \"\n            \"отправки средств администратором в течении 24 часов вам придут деньги на \"\n            \"ваши реквизиты ruruuururuur\",\n            reply_markup=inline_keybords.profile_markup()\n        )\n        utc_now = pytz.utc.localize(datetime.datetime.utcnow())\n        date_time_now = utc_now.astimezone(pytz.timezone(\"UTC\"))\n\n        await db.remove_depozit(message.from_user.id, data_requests[\"WITHDRAW_AMOUNT\"], loop)\n        await db.set_last_withd(message.from_user.id, date_time_now, loop)\n        await state.reset_state(with_data=False)\n\n\n@dp.callback_query_handler(text=\"remove_money\")\nasync def remove_money(callback: types.CallbackQuery):\n    money = int(await db.get_gift_money(callback.from_user.id, loop))\n\n    if money < 1000:\n        await callback.answer(\"\uD83D\uDEAB У вас на балансе не достаточно средств для вывода, минимальная сумма: 1000 RUB\",\n                              show_alert=True)\n    else:\n        try:\n            await bot.delete_message(\n                callback.from_user.id,\n                callback.message.message_id\n            )\n        except:\n            pass\n        await bot.send_message(\n            callback.from_user.id,\n            f\"Какую сумму вы хотите вывести.\\nМин. 1000.0 RUB, макс. 2000000.0 RUB)\\n\\nДоступно {money} RUB\",\n            reply_markup=inline_keybords.cancel_trans_money()\n        )\n        await WithdrawMoneyFSM.WITHDRAW_AMOUNT.set()\n\n\n@dp.message_handler(state=WithdrawMoneyFSM.WITHDRAW_AMOUNT)\nasync def withdraw_amount(message: types.Message, state: FSMContext):\n    if message.text == \"Отменить\":\n        await state.reset_state(with_data=False)\n        await message.answer(\"Вывод денег успешно отменен\", reply_markup=inline_keybords.profile_markup())\n        return\n\n    else:\n        if not message.text.isdigit():\n            await message.answer(\"Введите пожалуйста сумму в виде цифр!\")\n            return\n\n        if int(message.text) < 1000:\n            await message.answer(\"Слишком маленькая сумма\")\n            return\n        money = int(await db.get_gift_money(message.from_user.id, loop))\n\n        if int(message.text) > money:\n            await message.answer(f\"Недостаточно денег на счету. Доступно: {money} руб\")\n            return\n\n        async with state.proxy() as data:\n            data[\"WITHDRAW_AMOUNT\"] = int(message.text)\n        await message.answer(\n            \"\uD83D\uDCE4 Выберите платежную систему, c помощью которой хотите вывести средства из бота\",\n            reply_markup=inline_keybords.get_inline_for_withdraw()\n        )\n        await WithdrawMoneyFSM.next()\n\n\n@dp.message_handler(lambda mes: mes.text.lower() == \"отменить\", state=\"*\")\nasync def cancel_handler(message: types.Message, state: FSMContext):\n    await state.reset_state()\n    await message.answer(\"Запрос на снятие денег отменен\", reply_markup=inline_keybords.profile_markup())\n\n\n@dp.callback_query_handler(text=\"withdraw_payrement_bank\", state=WithdrawMoneyFSM.WITHDRAW_TYPE)\nasync def withdraw_payrement_bank(callback: types.CallbackQuery, state: FSMContext):\n    async with state.proxy() as data:\n        data[\"WITHDRAW_TYPE\"] = \"bank\"\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    await bot.send_message(callback.from_user.id, \"Введите номер карты, на которую хотите перевести деньги\")\n    await WithdrawMoneyFSM.NUMBER_CARD.set()\n\n\n@dp.callback_query_handler(text=\"withdraw_payrement_crypt\", state=WithdrawMoneyFSM.WITHDRAW_TYPE)\nasync def withdraw_payrement_crypt(callback: types.CallbackQuery, state: FSMContext):\n    async with state.proxy() as data:\n        data[\"WITHDRAW_TYPE\"] = \"crypt\"\n    try:\n        await bot.delete_message(callback.from_user.id, callback.message.message_id)\n    except:\n        pass\n    await bot.send_message(callback.from_user.id,\n                           \"\uD83C\uDFE6 Введите криптовалюту, на которую будет осуществляться вывод (BTC, USDT, ETH, LTC)\")\n    await WithdrawMoneyFSM.TYPE_CRYPT.set()\n\n\n@dp.message_handler(state=WithdrawMoneyFSM.TYPE_CRYPT)\nasync def withdraw_payrement_crypt(message: types.Message, state: FSMContext):\n    if message.text not in ['BTC', 'USDT', 'ETH', 'LTC', 'btc', 'usdt', 'eth', 'ltc']:\n        await message.answer(\"Введите правильную криптовалюту\")\n        return\n    async with state.proxy() as data:\n        data[\"TYPE_CRYPT\"] = message.text\n    await message.answer(f\"Введите адрес {message.text.upper()}, на который будет осуществляться вывод\")\n    await WithdrawMoneyFSM.CRYPT_CARD.set()\n\n\n@dp.message_handler(state=WithdrawMoneyFSM.CRYPT_CARD)\nasync def withdraw_payrement_crypt(message: types.Message, state: FSMContext):\n    async with state.proxy() as data:\n        data[\"CRYPT_CARD\"] = message.text\n\n    async with lock:\n        if message.text == \"Отменить\":\n            await state.reset_state(with_data=False)\n            await message.answer(\"Вывод денег успешно отменен\", reply_markup=inline_keybords.profile_markup())\n            return\n        async with state.proxy() as data:\n            data[\"DATA_USER\"] = 'crypt'\n\n        data_requests = await state.get_data()\n        print(data_requests)\n        amount_com = int(data.get(\"WITHDRAW_AMOUNT\")) - int(data.get(\"WITHDRAW_AMOUNT\")) * config.COMMISSION\n        utc_now = pytz.utc.localize(datetime.datetime.utcnow())\n        date_time_now = utc_now.astimezone(pytz.timezone(\"UTC\"))\n\n        if data.get(\"WITHDRAW_TYPE\") == 'crypt':\n            amount_crypt = int(data.get(\"WITHDRAW_AMOUNT\"))\n            curs = float(await coinbase_data.get_kurs(str(data.get(\"TYPE_CRYPT\")).upper()))\n            res = round(amount_com / curs, 11)\n            await dbWithDraw.create_request_crypt(\n                data_requests[\"CRYPT_CARD\"],\n                data_requests[\"DATA_USER\"],\n                data_requests[\"WITHDRAW_TYPE\"],\n                data_requests[\"WITHDRAW_AMOUNT\"],\n                res,\n                amount_com,\n                message.from_user.id,\n                date_time_now,\n                data.get(\"TYPE_CRYPT\"),\n                loop\n            )\n        else:\n            await dbWithDraw.create_request_bank(\n                data_requests[\"NUMBER_CARD\"],\n                data_requests[\"DATA_USER\"],\n                data_requests[\"WITHDRAW_TYPE\"],\n                data_requests[\"WITHDRAW_AMOUNT\"],\n                amount_com,\n                message.from_user.id,\n                date_time_now,\n                loop\n            )\n        await message.answer(\n            \"Заявка на вывод средств успешно отправлена, ожидайте подтверждение \"\n            \"отправки средств администратором в течении 24 часов вам придут деньги на \"\n            \"ваши реквизиты\",\n            reply_markup=inline_keybords.profile_markup()\n        )\n\n        await db.remove_gift_money(message.from_user.id, data_requests[\"WITHDRAW_AMOUNT\"], loop)\n        await state.reset_state(with_data=False)\n\n    # await message.answer(f\"Отлично. Теперь введите Ф.И.О\")\n    # await WithdrawMoneyFSM.DATA_USER.set()\n\n\n@dp.message_handler(state=WithdrawMoneyFSM.NUMBER_CARD)\nasync def number_card(message: types.Message, state: FSMContext):\n    if message.text == \"Отменить\":\n        await state.reset_state(with_data=False)\n        await message.answer(\"Вывод денег успешно отменен\", reply_markup=inline_keybords.profile_markup())\n        return\n\n    async with state.proxy() as data:\n        data[\"NUMBER_CARD\"] = message.text\n\n    await message.answer(\"Отлично. Теперь введите Ф.И.О\")\n    await WithdrawMoneyFSM.DATA_USER.set()\n\n\n@dp.message_handler(state=WithdrawMoneyFSM.DATA_USER)\nasync def number_card(message: types.Message, state: FSMContext):\n    async with lock:\n        if message.text == \"Отменить\":\n            await state.reset_state(with_data=False)\n            await message.answer(\"Вывод денег успешно отменен\", reply_markup=inline_keybords.profile_markup())\n            return\n        async with state.proxy() as data:\n            data[\"DATA_USER\"] = message.text\n        data_requests = await state.get_data()\n        print(data_requests)\n        amount_com = int(data.get(\"WITHDRAW_AMOUNT\")) - int(data.get(\"WITHDRAW_AMOUNT\")) * config.COMMISSION\n        utc_now = pytz.utc.localize(datetime.datetime.utcnow())\n        date_time_now = utc_now.astimezone(pytz.timezone(\"UTC\"))\n\n        if data.get(\"WITHDRAW_TYPE\") == 'crypt':\n            amount_crypt = int(data.get(\"WITHDRAW_AMOUNT\"))\n            curs = float(await coinbase_data.get_kurs(str(data.get(\"TYPE_CRYPT\")).upper()))\n            res = round(amount_crypt / curs, 11)\n            await dbWithDraw.create_request_crypt(\n                data_requests[\"CRYPT_CARD\"],\n                data_requests[\"DATA_USER\"],\n                data_requests[\"WITHDRAW_TYPE\"],\n                data_requests[\"WITHDRAW_AMOUNT\"],\n                res,\n                amount_com,\n                message.from_user.id,\n                date_time_now,\n                data.get(\"TYPE_CRYPT\"),\n                loop\n            )\n        else:\n            await dbWithDraw.create_request_bank(\n                data_requests[\"NUMBER_CARD\"],\n                data_requests[\"DATA_USER\"],\n                data_requests[\"WITHDRAW_TYPE\"],\n                data_requests[\"WITHDRAW_AMOUNT\"],\n                amount_com,\n                message.from_user.id,\n                date_time_now,\n                loop\n            )\n        await message.answer(\n            \"Заявка на вывод средств успешно отправлена, ожидайте подтверждение \"\n            \"отправки средств администраторомв течении 24 часов вам придут деньги на \"\n            \"ваши реквизиты\",\n            reply_markup=inline_keybords.profile_markup()\n        )\n\n        await db.remove_gift_money(message.from_user.id, data_requests[\"WITHDRAW_AMOUNT\"], loop)\n        await state.reset_state(with_data=False)\n\n\n# ------------------------------------------------Admin------------------------------------------------------------------------------\n\n\n@dp.message_handler(commands=\"type\")\nasync def change_type(message: types.Message):\n    print(message.from_user.id)\n    print(config.ADMINS[0])\n    print(message.from_user.id in config.ADMINS)\n    if message.from_user.id in config.ADMINS:\n        await message.answer(\"Выберите криптовалюту\", reply_markup=inline_keybords.get_admi_crypt_type())\n        await ChangeCryptTypeFSN.TYPE.set()\n\n\n@dp.message_handler(state=ChangeCryptTypeFSN.TYPE)\nasync def change_type_res(message: types.Message, state: FSMContext):\n    if message.from_user.id in config.ADMINS:\n        config.TYPE_CRIPT = message.text\n\n        await message.answer(\n            \"Криптовалюта успешно установлена\",\n            reply_markup=inline_keybords.profile_markup()\n        )\n\n        await state.reset_state(with_data=False)\n\n\n@dp.message_handler()\nasync def change_type_res(message: types.Message):\n    print(message.text + \" \" + str(message.from_user.id))\n\n\nif __name__ == '__main__':\n    executor.start_polling(dp, skip_updates=True)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Scripts/main.py b/Scripts/main.py
--- a/Scripts/main.py	(revision 0e4295fbda0e01637970ac94d8a82a0c16c4ec69)
+++ b/Scripts/main.py	(date 1674245957617)
@@ -318,15 +318,6 @@
 Ваша реферальная ссылка:
 https://t.me/{NAME_BOT}?start={message.from_user.id}'''
 
-    with open(PATH + "/img/referrer.png", 'rb') as file:
-        await bot.send_photo(
-            message.from_user.id,
-            photo=file,
-            caption=answer_text,
-            reply_markup=inline_keybords.get_tools(),
-            parse_mode="HTML"
-        )
-
 
 @dp.callback_query_handler(text="invite_new_person")
 async def invite_new_person(callback: types.CallbackQuery):
@@ -613,7 +604,7 @@
             text = f"🤖 Ваш ID: {message.from_user.id}\n" \
                    f"📆 Профиль создан: {date}\n" \
                    f"🚀 Статус: {level_text} {text_status}\n" \
-                   f"🙋‍♂ Лично приглашенные: {await db.get_count_ref(message.from_user.id, loop)} " \
+                   f"🙋‍♂️ Лично приглашенные: {await db.get_count_ref(message.from_user.id, loop)} " \
                    f"({await db.get_activate_count_ref(message.from_user.id, loop)})\n" \
                    "Ваш депозит: 💰👇\n" \
                    "——————————————————\n" \
